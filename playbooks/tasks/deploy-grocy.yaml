---
- name: deploy-grocy | Ensure modern version of Docker is available on host
  ansible.builtin.include_tasks:
    file: tasks/hosts-dependency-check-docker-version.yaml

####### GROCY SECTION

# https://hub.docker.com/_/grocy
# https://codeopolis.com/posts/how-to-install-grocy-using-docker/
# Initial login: User: admin, Password: admin

- name: deploy-grocy | Set Grocy facts
  ansible.builtin.set_fact:
    grocy_image: "{{ grocy_image | default('linuxserver/grocy:latest') }}"
    grocy_service_name: "{{ grocy_service_name | default('grocy') }}"
    grocy_service_port: "{{ grocy_service_port | default(9283) }}"

- name: deploy-grocy | Set Grocy network facts
  ansible.builtin.set_fact:
    grocy_network_name: "{{ grocy_network_name | default(grocy_service_name) }}"

- name: deploy-grocy | Set Grocy volume facts
  ansible.builtin.set_fact:
    grocy_volume_name: "{{ grocy_volume_name | default(grocy_service_name) }}"

- name: deploy-grocy | Set Grocy aggregated facts
  ansible.builtin.set_fact:
    grocy_fqdn: "{{ grocy_service_name }}.{{ ansible_hostname }}.{{ homelab.certificate_domain | default('localdomain') }}"

- name: deploy-grocy | Set Grocy service facts
  ansible.builtin.set_fact:
    grocy_networks:
      # Reverse Proxy  network is used to expose applications via Traefik
      - { name: "{{ reverse_proxy_network_name | default('reverse-proxy') }}" }
    grocy_ports:
      # Published ports to expose outside the container
      # host port:container port
      - "{{ grocy_service_port }}:9283"
    grocy_user: { uid: 1000, gid: 1000 }
    grocy_volumes:
      # Local paths to mount into the container
      # local path:container path
      - "{{ grocy_volume_name }}:/config"

- name: deploy-grocy | Log Grocy configuration
  ansible.builtin.debug:
    msg:
      - "Grocy image: {{ grocy_image }}"
      - "Grocy service name: {{ grocy_service_name }}"
      - "Grocy FQDN: {{ grocy_fqdn }}"
      - "Grocy networks: {{ grocy_networks | default(omit) }}"
      - "Grocy ports: {{ grocy_ports | default(omit) }}"
      - "Grocy volumes: {{ grocy_volumes | default(omit) }}"

- name: deploy-grocy | Create Grocy container labels
  ansible.builtin.set_fact:
    grocy_container_labels: "{{ grocy_container_labels | default({}) | combine({item.key: item.value}) }}"
  with_items:
    # ---------------------------------------------------------------
    # Docker Volume Backup labels
    - { "key": "docker-volume-backup.stop-during-backup", "value": "true" }
    # ---------------------------------------------------------------
    # Homepage labels
    - { "key": "homepage.group", "value": "Applications" }
    - { "key": "homepage.name", "value": "Grocy" }
    - { "key": "homepage.description", "value": "What's in the pantry?" }
    - { "key": "homepage.icon", "value": "grocy.png" }
    - { "key": "homepage.href", "value": "https://{{ grocy_fqdn }}/" }
    - { "key": "homepage.siteMonitor", "value": "https://{{ grocy_fqdn }}/" }
    # ---------------------------------------------------------------
    # Traefik labels
    - { "key": "traefik.enable", "value": "true" }
    - {
      "key": "traefik.http.routers.{{ grocy_service_name }}.entrypoints",
      "value": "{{ traefik_entrypoint_secure_name }}",
    }
    - {
      "key": "traefik.http.routers.{{ grocy_service_name }}.rule",
      "value": "Host(`{{ grocy_fqdn }}`)",
    }
    # ---------------------------------------------------------------
    # What's up Docker? labels
    - { "key": "wud.tag.include", "value": '^\d+\.\d+\.\d+$$' }
    - {
      "key": "wud.link.template",
      "value": "https://github.com/grocy/grocy/releases/tag/v${major}.${minor}.${patch}",
    }

- name: deploy-grocy | Create Grocy networks
  when: grocy_networks is defined
  community.docker.docker_network:
    name: "{{ item.name }}"
    driver: "{{ item.driver | default('bridge') }}"
    internal: "{{ item.internal | default(false) }}"
    state: present
  loop: "{{ grocy_networks }}"

- name: deploy-grocy | Create Grocy volume
  when: grocy_volume_name is defined
  community.docker.docker_volume:
    name: "{{ item }}"
    state: present
  loop:
    - "{{ grocy_volume_name }}"

- name: deploy-grocy | Check if Grocy is running # noqa: syntax-check[unknown-module]
  community.docker.docker_container_info:
    name: "{{ grocy_service_name }}"
  register: grocy_state

- name: deploy-grocy | Remove Grocy container if changing version
  when:
    - grocy_state.exists
    - (grocy_image | split(':') | last) != (grocy_state.container.Config.Image | split(':') | last)
  block:

    - name: deploy-grocy | Stop and remove existing Grocy container
      community.docker.docker_container:
        name: "{{ grocy_service_name }}"
        state: absent

    - name: deploy-grocy | Set update Grocy
      ansible.builtin.set_fact:
        grocy_update: true

- name: deploy-grocy | Deploy Grocy if not running
  when:
    - not grocy_state.exists or (grocy_update | default(false))
  block:

    - name: deploy-grocy | Pull Grocy image
      community.docker.docker_image:
        name: "{{ grocy_image }}"
        source: pull

    # initial password: user: admin, password: admin
    - name: deploy-grocy | Deploy Grocy
      community.docker.docker_container:
        name: "{{ grocy_service_name }}"
        image: "{{ grocy_image }}"
        detach: true
        env:
          PUID: "{{ grocy_user.uid | default(1000) | quote }}"
          PGID: "{{ grocy_user.gid | default(1000) | quote }}"
          TZ: "{{ homelab.timezone | default('UTC') }}"
        labels: "{{ grocy_container_labels | default(omit) }}"
        networks_cli_compatible: true
        networks: "{{ grocy_networks | ansible.utils.remove_keys(target=['internal']) | default(omit) }}"
        restart: true
        restart_policy: unless-stopped
        state: started
        volumes: "{{ default_host_volumes + grocy_volumes | default(omit) }}"
      register: grocy_container_state

- name: deploy-grocy | Wait for Grocy to accept connections
  ansible.builtin.wait_for:
    host: "{{ grocy_fqdn }}"
    port: 80
    connect_timeout: 1
    delay: 10
    state: started
    timeout: 30
  register: grocy_running
  retries: 10
  until: grocy_running is success
