---
- name: deploy-ntfy | Ensure modern version of Docker is available on host
  ansible.builtin.include_tasks:
    file: tasks/hosts-dependency-check-docker-version.yaml

####### NTFY SECTION

# https://hub.docker.com/r/ntfy/ntfy
# https://ntfy.net/docs/traefik
# https://github.com/1RandomDev/homeassistant-ntfy

- name: deploy-ntfy | Set Ntfy facts
  ansible.builtin.set_fact:
    ntfy_image: "{{ ntfy_image | default('binwiederhier/ntfy:latest') }}"
    ntfy_service_name: "{{ ntfy_service_name | default('ntfy') }}"
    ntfy_service_port: "{{ ntfy_service_port | default(80) }}"

- name: deploy-ntfy | Set Ntfy network facts
  ansible.builtin.set_fact:
    ntfy_network_name: "{{ ntfy_network_name | default(ntfy_service_name) }}"

- name: deploy-ntfy | Set Ntfy volume facts
  ansible.builtin.set_fact:
    ntfy_volume_cache_name: "{{ ntfy_volume_cache_name | default(ntfy_service_name + '-cache') }}"
    # ntfy_volume_config_name: "{{ ntfy_volume_cache_name | default(ntfy_service_name + '-config') }}"

- name: deploy-ntfy | Set Ntfy aggregated facts
  ansible.builtin.set_fact:
    ntfy_fqdn: "{{ ntfy_service_name }}.{{ ansible_hostname }}.{{ homelab.certificate_domain | default('localdomain') }}"

- name: deploy-ntfy | Set Ntfy service facts
  ansible.builtin.set_fact:
    ntfy_command:
      - "serve"
      # - "--port"
      # - "80"
      # - "--data-dir"
      # - "/ntfy/data"
      # - "--cache-dir"
      # - "/ntfy/cache"
      # - "--config-dir"
      # - "/ntfy/config"
      # - "--log-level"
      # - "info"
      # - "--log-format"
      # - "text"
      # - "--allow-anonymous"
      # - "true"
      # - "--cors-origin"
      # - "*"
    ntfy_networks:
      # Reverse Proxy  network is used to expose applications via Traefik
      - { name: "{{ reverse_proxy_network_name | default('reverse-proxy') }}" }
    ntfy_ports:
      # Published ports to expose outside the container
      # host port:container port
      - "{{ ntfy_service_port }}:80"
    ntfy_volumes:
      # Local paths to mount into the container
      # local path:container path
      - "{{ ntfy_volume_cache_name }}:/var/cache/ntfy"
      # - "{{ ntfy_volume_config_name }}:/etc/ntfy"

- name: deploy-ntfy | Log Ntfy configuration
  ansible.builtin.debug:
    msg:
      - "Ntfy image: {{ ntfy_image }}"
      - "Ntfy service name: {{ ntfy_service_name }}"
      - "Ntfy FQDN: {{ ntfy_fqdn }}"
      - "Ntfy command: {{ ntfy_command | default(omit) }}"
      - "Ntfy networks: {{ ntfy_networks | default(omit) }}"
      - "Ntfy ports: {{ ntfy_ports | default(omit) }}"
      - "Ntfy volumes: {{ ntfy_volumes | default(omit) }}"

- name: deploy-ntfy | Create Ntfy container labels
  ansible.builtin.set_fact:
    ntfy_container_labels: "{{ ntfy_container_labels | default({}) | combine({item.key: item.value}) }}"
  with_items:
    # ---------------------------------------------------------------
    # Homepage labels
    - { "key": "homepage.group", "value": "Applications" }
    - { "key": "homepage.name", "value": "Ntfy" }
    - { "key": "homepage.description", "value": "Send push notifications to your phone or desktops" }
    - { "key": "homepage.icon", "value": "ntfy.png" }
    - { "key": "homepage.href", "value": "https://{{ ntfy_fqdn }}/" }
    - { "key": "homepage.siteMonitor", "value": "https://{{ ntfy_fqdn }}/" }
    # ---------------------------------------------------------------
    # Traefik labels
    - { "key": "traefik.enable", "value": "true" }
    - {
      "key": "traefik.http.routers.{{ ntfy_service_name }}.entrypoints",
      "value": "{{ traefik_entrypoint_secure_name }}",
    }
    - {
      "key": "traefik.http.routers.{{ ntfy_service_name }}.rule",
      "value": "Host(`{{ ntfy_fqdn }}`)",
    }
    # ---------------------------------------------------------------
    # What's up Docker? labels
    - { "key": "wud.tag.include", "value": '^\d+\.\d+\.\d+$$' }
    - {
      "key": "wud.link.template",
      "value": "https://github.com/binwiederhier/ntfy/releases/tag/v${major}.${minor}.${patch}",
    }

- name: deploy-ntfy | Create Ntfy networks
  when: ntfy_networks is defined
  community.docker.docker_network:
    name: "{{ item.name }}"
    driver: "{{ item.driver | default('bridge') }}"
    internal: "{{ item.internal | default(false) }}"
    state: present
  loop: "{{ ntfy_networks }}"

- name: deploy-ntfy | Create Ntfy volumes
  when: ntfy_volume_cache_name is defined and ntfy_volume_config_name is defined and (ntfy_volumes | length > 0)
  community.docker.docker_volume:
    name: "{{ item }}"
    state: present
  loop:
    - "{{ ntfy_volume_cache_name }}"
    # - "{{ ntfy_volume_config_name }}"

- name: deploy-ntfy | Check if Ntfy is running
  community.docker.docker_container_info:
    name: "{{ ntfy_service_name }}"
  register: ntfy_state

- name: deploy-ntfy | Remove Ntfy container if changing version
  when:
    - ntfy_state.exists
    - (ntfy_image | split(':') | last) != (ntfy_state.container.Config.Image | split(':') | last)
  block:

    - name: deploy-ntfy | Stop and remove existing Ntfy container
      community.docker.docker_container:
        name: "{{ ntfy_service_name }}"
        state: absent

    - name: deploy-ntfy | Set update Ntfy
      ansible.builtin.set_fact:
        ntfy_update: true

- name: deploy-ntfy | Deploy Ntfy if not running
  when:
    - not ntfy_state.exists or (ntfy_update | default(false))
  block:

    - name: deploy-ntfy | Pull Ntfy image
      community.docker.docker_image:
        name: "{{ ntfy_image }}"
        source: pull

    - name: deploy-ntfy | Deploy Ntfy
      community.docker.docker_container:
        name: "{{ ntfy_service_name }}"
        image: "{{ ntfy_image }}"
        command: "{{ ntfy_command }}"
        detach: true
        env:
          TZ: "{{ homelab.timezone | default('UTC') }}"
        labels: "{{ ntfy_container_labels | default(omit) }}"
        networks_cli_compatible: true
        networks: "{{ ntfy_networks | ansible.utils.remove_keys(target=['internal']) | default(omit) }}"
        restart: true
        restart_policy: unless-stopped
        state: started
        volumes: "{{ default_host_volumes + ntfy_volumes | default(omit) }}"
      register: ntfy_container_state

- name: deploy-ntfy | Wait for Ntfy to accept connections
  ansible.builtin.wait_for:
    host: "{{ ntfy_fqdn }}"
    port: 80
    connect_timeout: 1
    delay: 10
    state: started
    timeout: 30
  register: ntfy_running
  retries: 10
  until: ntfy_running is success
