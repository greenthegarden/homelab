---
- name: deploy-semaphore | Ensure modern version of Docker is available on host
  ansible.builtin.include_tasks:
    file: tasks/hosts-dependency-check-docker-version.yaml

- name: deploy-semaphore | Ensure required Semaphore variables are set
  ansible.builtin.assert:
    that:
      - semaphore.admin_username is defined
      - semaphore.admin_password is defined
      - semaphore.admin_name is defined
      - semaphore.admin_email is defined
    fail_msg: "One or more required Docmost variables are not defined! Please define them in your inventory or group_vars/host_vars."

####### SEMAPHORE SECTION

# https://hub.docker.com/_/semaphore
# https://codeopolis.com/posts/how-to-install-semaphore-using-docker/

- name: deploy-semaphore | Set Semaphore facts
  ansible.builtin.set_fact:
    semaphore_image: "{{ semaphore_image | default('semaphoreui/semaphore:latest') }}"
    semaphore_service_name: "{{ semaphore_service_name | default('semaphore') }}"
    semaphore_service_port: "{{ semaphore_service_port | default(3000) }}"
    semaphore_db_dialect: "{{ semaphore_db_dialect | default('sqlite') }}"

- name: deploy-semaphore | Set Semaphore network facts
  ansible.builtin.set_fact:
    semaphore_network_name: "{{ semaphore_network_name | default(semaphore_service_name) }}"

- name: deploy-semaphore | Set Semaphore volume facts
  ansible.builtin.set_fact:
    semaphore_volume_data_name: "{{ semaphore_volume_data_name | default(semaphore_service_name + '_data') }}"
    semaphore_volume_config_name: "{{ semaphore_volume_config_name | default(semaphore_service_name + '_config') }}"
    semaphore_volume_tmp_name: "{{ semaphore_volume_tmp_name | default(semaphore_service_name + '_tmp') }}"

- name: deploy-semaphore | Set Semaphore aggregated facts
  ansible.builtin.set_fact:
    semaphore_fqdn: "{{ semaphore_service_name }}.{{ ansible_hostname }}.{{ homelab.certificate_domain | default('localdomain') }}"

- name: deploy-semaphore | Set Semaphore service facts
  ansible.builtin.set_fact:
    semaphore_networks:
      # Reverse Proxy  network is used to expose applications via Traefik
      - { name: "{{ reverse_proxy_network_name | default('reverse-proxy') }}" }
    semaphore_ports:
      # Published ports to expose outside the container
      # host port:container port
      - "{{ semaphore_service_port }}:3000"
    semaphore_volumes:
      # Local paths to mount into the container
      # local path:container path
      - "{{ semaphore_volume_data_name }}:/var/lib/semaphore"
      - "{{ semaphore_volume_config_name }}:/etc/semaphore"
      - "{{ semaphore_volume_tmp_name }}:/tmp/semaphore"

- name: deploy-semaphore | Log Semaphore configuration
  ansible.builtin.debug:
    msg:
      - "Semaphore image: {{ semaphore_image }}"
      - "Semaphore service name: {{ semaphore_service_name }}"
      - "Semaphore FQDN: {{ semaphore_fqdn }}"
      - "Semaphore networks: {{ semaphore_networks | default(omit) }}"
      - "Semaphore ports: {{ semaphore_ports | default(omit) }}"
      - "Semaphore volumes: {{ semaphore_volumes | default(omit) }}"

- name: deploy-semaphore | Create Semaphore container labels
  ansible.builtin.set_fact:
    semaphore_container_labels: "{{ semaphore_container_labels | default({}) | combine({item.key: item.value}) }}"
  with_items:
    # ---------------------------------------------------------------
    # Docker Volume Backup labels
    - { "key": "docker-volume-backup.stop-during-backup", "value": "true" }
    # ---------------------------------------------------------------
    # Homepage labels
    - { "key": "homepage.group", "value": "System" }
    - { "key": "homepage.name", "value": "Semaphore" }
    - { "key": "homepage.description", "value": "Modern UI for Ansible" }
    - { "key": "homepage.icon", "value": "semaphore.png" }
    - { "key": "homepage.href", "value": "https://{{ semaphore_fqdn }}/" }
    - {
      "key": "homepage.siteMonitor",
      "value": "https://{{ semaphore_fqdn }}/",
    }
    # ---------------------------------------------------------------
    # Traefik labels
    - { "key": "traefik.enable", "value": "true" }
    - {
      "key": "traefik.http.routers.{{ semaphore_service_name }}.entrypoints",
      "value": "{{ traefik_entrypoint_secure_name }}",
    }
    - {
      "key": "traefik.http.routers.{{ semaphore_service_name }}.rule",
      "value": "Host(`{{ semaphore_fqdn }}`)",
    }
    # ---------------------------------------------------------------
    # What's up Docker? labels
    - { "key": "wud.tag.include", "value": '^\d+\.\d+\.\d+$$' }
    - {
      "key": "wud.link.template",
      "value": "https://github.com/semaphoreui/semaphore/releases/tag/v${major}.${minor}.${patch}",
    }

- name: deploy-semaphore | Create Semaphore networks
  when: semaphore_networks is defined
  community.docker.docker_network:
    name: "{{ item.name }}"
    driver: "{{ item.driver | default('bridge') }}"
    internal: "{{ item.internal | default(false) }}"
    state: present
  loop: "{{ semaphore_networks }}"

- name: deploy-semaphore | Create Semaphore volumes
  community.docker.docker_volume:
    name: "{{ item }}"
    state: present
  loop:
    - "{{ semaphore_volume_data_name }}"
    - "{{ semaphore_volume_config_name }}"
    - "{{ semaphore_volume_tmp_name }}"

- name: deploy-semaphore | Check if Semaphore is running
  community.docker.docker_container_info:
    name: "{{ semaphore_service_name }}"
  register: semaphore_state

- name: deploy-semaphore | Remove Semaphore container if changing version
  when:
    - semaphore_state.exists
    - (semaphore_image | split(':') | last) != semaphore_state.container.Config.Image | split(':') | last
  block:

    - name: deploy-semaphore | Stop and remove existing Semaphore container
      community.docker.docker_container:
        name: "{{ semaphore_service_name }}"
        state: absent

    - name: deploy-semaphore | Set update Semaphore
      ansible.builtin.set_fact:
        semaphore_update: true

- name: deploy-semaphore | Deploy Semaphore if not running
  when:
    - not semaphore_state.exists or (semaphore_update | default(false))
  block:

    - name: deploy-semaphore | Pull Semaphore image
      community.docker.docker_image:
        name: "{{ semaphore_image }}"
        source: pull

    # docker run --name semaphore \
    # -p 3000:3000 \
    # -e SEMAPHORE_DB_DIALECT=bolt \
    # -e SEMAPHORE_ADMIN=admin \
    # -e SEMAPHORE_ADMIN_PASSWORD=changeme \
    # -e SEMAPHORE_ADMIN_NAME="Admin" \
    # -e SEMAPHORE_ADMIN_EMAIL=admin@localhost \
    # -v semaphore_data:/var/lib/semaphore \
    # -v semaphore_config:/etc/semaphore \
    # -v semaphore_tmp:/tmp/semaphore \
    # -d semaphoreui/semaphore:v2.12.4

    - name: deploy-semaphore | Deploy Semaphore
      community.docker.docker_container:
        name: "{{ semaphore_service_name }}"
        image: "{{ semaphore_image }}"
        detach: true
        env:
          SEMAPHORE_DB_DIALECT: "{{ semaphore_db_dialect }}"
          SEMAPHORE_ADMIN: "{{ semaphore.admin_username | default('dummy') }}"
          SEMAPHORE_ADMIN_PASSWORD: "{{ semaphore.admin_password | default('dummy') }}"
          SEMAPHORE_ADMIN_NAME: "{{ semaphore.admin_name | default('dummy') }}"
          SEMAPHORE_ADMIN_EMAIL: "{{ semaphore.admin_email | default('dummy') }}"
          SEMAPHORE_MAX_TASKS_PER_TEMPLATE: "{{ 10 | quote | default(omit) }}"
        labels: "{{ semaphore_container_labels | default(omit) }}"
        networks_cli_compatible: true
        networks: "{{ semaphore_networks | ansible.utils.remove_keys(target=['internal']) | default(omit) }}"
        restart: true
        restart_policy: unless-stopped
        state: started
        volumes: "{{ default_host_volumes + semaphore_volumes | default(omit) }}"
      register: semaphore_container_state

- name: deploy-semaphore | Wait for Semaphore to accept connections
  ansible.builtin.wait_for:
    host: "{{ semaphore_fqdn }}"
    port: 80
    connect_timeout: 1
    delay: 10
    state: started
    timeout: 30
  register: semaphore_running
  retries: 10
  until: semaphore_running is success
