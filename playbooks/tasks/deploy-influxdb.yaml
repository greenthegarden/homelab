---
- name: deploy-influxdb | Ensure modern version of Docker is available on host
  ansible.builtin.include_tasks:
    file: tasks/hosts-dependency-check-docker-version.yaml

####### INFLUXDB SECTION

# https://hub.docker.com/_/influxdb/

- name: deploy-influxdb | Set InfluxDB facts
  ansible.builtin.set_fact:
    influxdb_image: "{{ influxdb_image | default('influxdb:latest') }}"
    influxdb_service_name: "{{ influxdb_service_name | default('influxdb') }}"
    influxdb_service_port: "{{ influxdb_service_port | default(8086) }}"
    influxdb_config_volume_name: "{{ influxdb_config_volume_name | default('influxconfig') }}"
    influxdb_data_volume_name: "{{ influxdb_data_volume_name | default('influxdata') }}"
    influxdb_init_mode: "{{ influxdb_init_mode | default(omit) }}"
    influxdb_init_retention: "{{ influxdb_init_retention | default(omit) }}"

- name: deploy-influxdb | Set InfluxDB aggregated facts
  ansible.builtin.set_fact:
    influxdb_fqdn: "{{ influxdb_service_name }}.{{ ansible_hostname }}.{{ homelab.lan_domain | default('localdomain') }}"

- name: deploy-influxdb | Set InfluxDB service facts
  ansible.builtin.set_fact:
    influxdb_networks:
      - name: "{{ web_network_name | default('web') }}"
    influxdb_ports:
      - "{{ influxdb_service_port | default(8086) }}:8086"
    influxdb_volumes:
      - "{{ influxdb_config_volume_name }}:/etc/influxdb2"
      - "{{ influxdb_data_volume_name }}:/var/lib/influxdb2"
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

# Should be creating a homeassistant bucket here as defined at
# https://docs.influxdata.com/influxdb/v2.1/organizations/buckets/create-bucket/

- name: deploy-influxdb | Create InfluxDB container labels
  ansible.builtin.set_fact:
    influxdb_container_labels: "{{ influxdb_container_labels | default({}) | combine({item.key: item.value}) }}"
  with_items:
    # Traefik labels
    - { "key": "traefik.enable", "value": "true" }
    - { "key": "traefik.docker.network", "value": "{{ web_network_name }}" }
    - {
      "key": "traefik.http.routers.{{ influxdb_service_name }}.entrypoints",
      "value": "websecure",
    }
    - {
      "key": "traefik.http.routers.{{ influxdb_service_name }}.rule",
      "value": "Host(`{{ influxdb_fqdn }}`)",
    }
    - {
      "key": "traefik.http.routers.{{ influxdb_service_name }}.service",
      "value": "{{ influxdb_service_name }}",
    }
    - {
      "key": "traefik.http.routers.{{ influxdb_service_name }}.tls",
      "value": "true",
    }
    # What's up Docker? labels
    - { "key": "wud.tag.include", "value": '^\d+\.\d+\.\d+-alpine+$$' }
    - {
      "key": "wud.link.template",
      "value": "https://github.com/influxdata/influxdb/releases/tag/v${major}.${minor}.${patch}",
    }
    # Homepage labels
    - { "key": "homepage.group", "value": "Monitoring" }
    - { "key": "homepage.name", "value": "InfluxDB" }
    - { "key": "homepage.description", "value": "Time-series data" }
    - { "key": "homepage.icon", "value": "influxdb.png" }
    - { "key": "homepage.href", "value": "https://{{ influxdb_fqdn }}/" }
    - { "key": "homepage.siteMonitor", "value": "https://{{ influxdb_fqdn }}/" }

- name: deploy-influxdb | Create InfluxDB volumes # noqa: syntax-check[unknown-module]
  community.docker.docker_volume:
    name: "{{ item }}"
    state: present
  loop:
    - "{{ influxdb_config_volume_name }}"
    - "{{ influxdb_data_volume_name }}"

- name: deploy-influxdb | Check if InfluxDB is running
  community.docker.docker_container_info:
    name: "{{ influxdb_service_name }}"
  register: influxdb_state

- name: deploy-influxdb | Remove InfluxDB container if changing version
  when:
    - influxdb_state.exists
    - influxdb_image | split(':') | last != influxdb_state.container.Config.Image | split(':') | last
  block:
    - name: deploy-influxdb | Stop and remove existing InfluxDB container
      community.docker.docker_container:
        name: "{{ influxdb_service_name }}"
        state: absent

    - name: deploy-influxdb | Set update InfluxDB
      ansible.builtin.set_fact:
        influxdb_update: true

- name: deploy-influxdb | Deploy InfluxDB if not running
  when: not influxdb_state.exists or (influxdb_update | default(false))
  block:
    - name: deploy-influxdb | Pull InfluxDB image
      community.docker.docker_image:
        name: "{{ influxdb_image }}"
        source: pull

    - name: deploy-influxdb | Deploy InfluxDB
      community.docker.docker_container:
        name: "{{ influxdb_service_name }}"
        image: "{{ influxdb_image }}"
        detach: true
        env:
          #   # DOCKER_INFLUXDB_INIT_MODE: "{{ influxdb_init_mode }}"
          #   DOCKER_INFLUXDB_INIT_USERNAME: "{{ influxdb.init_username | default('homelab') }}"
          #   DOCKER_INFLUXDB_INIT_PASSWORD: "{{ influxdb.init_password | default('dummy') }}"
          #   # DOCKER_INFLUXDB_INIT_ORG: "{{ influxdb.init_org | default('homelab') }}"
          #   # DOCKER_INFLUXDB_INIT_BUCKET: "{{ influxdb.init_bucket | default('homelab') }}"
          #   # DOCKER_INFLUXDB_INIT_RETENTION: "{{ influxdb_init_retention }}"
          #   # DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: "{{ influxdb.init_admin_token | default('dummy') }}"
          TZ: "{{ homelab.timezone | default('UTC') }}"
        labels: "{{ influxdb_container_labels }}"
        networks_cli_compatible: true
        networks: "{{ influxdb_networks }}"
        published_ports: "{{ influxdb_ports }}"
        restart: true
        restart_policy: unless-stopped
        volumes: "{{ influxdb_volumes }}"
      register: influxdb_container_state

    # - name: deploy-influxdb | Wait for InfluxDB to accept connections
    #   ansible.builtin.wait_for:
    #     host: "{{ influxdb_fqdn }}"
    #     port: 80
    #     connect_timeout: 1
    #     delay: 10
    #     state: started
    #     timeout: 30
    #   register: influxdb_running
    #   until: influxdb_running is success
    #   retries: 10
# - name: deploy-influxdb | Get status of Grafana Docker container
#   community.docker.docker_container_info:
#     name: "{{ grafana_service_name | default('grafana') }}"
#   register: grafana_container_status
#   ignore_errors: true

# - name: deploy-influxdb | Configure Grafana when deployed
#   when: grafana_container_status.exists
#   block:

#     - name: deploy-influxdb | Set Grafana API facts
#       ansible.builtin.set_fact:
#         grafana_instance: "{{ grafana_service_name | default('grafana') }}"
#         # Use domain name here as Grafana is running on a different Docker network
#         grafana_api_url: "http://{{ ansible_default_ipv4.address }}:{{ grafana_service_port }}"
#         grafana_security: {
#           admin_user: "{{ grafana.admin_user }}",
#           admin_password: "{{ grafana.admin_password }}"
#         }
#         grafana_use_provisioning: false  # will use API
#       tags:
#         - influxdb
#         - grafana

#     - name: deploy-influxdb | Add InfluxDB as a Grafana datasource
#       community.grafana.grafana_datasource:
#         name: "{{ item.name }}"
#         grafana_url: "{{ grafana_api_url }}"
#         grafana_user: "{{ grafana_security.admin_user }}"
#         grafana_password: "{{ grafana_security.admin_password }}"
#         org_id: "1"
#         ds_type: "{{ item.type }}"
#         ds_url: "{{ item.url }}"
#         database: "{{ influxdb_db }}"
#         access: "{{ item.access }}"
#         tls_skip_verify: true
#         state: present
#       with_items: "{{ grafana_datasources }}"
#       vars:
#         grafana_datasources:
#           - name: InfluxDB
#             type: influxdb
#             access: proxy
#             url: "http://{{ ansible_default_ipv4.address }}:{{ influxdb_service_port | default(8086) }}"
#             user: "{{ influxdb_read_user }}"
#             basic_auth_user: "{{ influxdb_read_user }}"
#             basic_auth_password: "{{ influxdb_read_password }}"
