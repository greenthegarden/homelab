---
- name: deploy-uptimekuma | Ensure modern version of Docker is available on host
  ansible.builtin.include_tasks:
    file: tasks/hosts-dependency-check-docker-version.yaml

####### UPTIMEKUMA SECTION

# https://hub.docker.com/_/uptimekuma
# https://codeopolis.com/posts/how-to-install-uptimekuma-using-docker/

- name: deploy-uptimekuma | Set Uptime Kuma facts
  ansible.builtin.set_fact:
    uptimekuma_image: "{{ uptimekuma_image | default('louislam/uptime-kuma:latest') }}"
    uptimekuma_image_tag: "{{ uptimekuma_image_tag | default('latest') }}"
    uptimekuma_service_name: "{{ uptimekuma_service_name | default('uptimekuma') }}"
    uptimekuma_service_port: "{{ uptimekuma_service_port | default(3001) }}"
    uptimekuma_volume_name: "{{ uptimekuma_volume_name | default('uptimekuma') }}"

- name: deploy-uptimekuma | Set Uptime Kuma aggregated facts
  ansible.builtin.set_fact:
    uptimekuma_fqdn: "{{ uptimekuma_service_name }}.{{ ansible_hostname }}.{{ homelab.lan_domain | default('localdomain') }}"

- name: deploy-uptimekuma | Set Uptime Kuma service facts
  ansible.builtin.set_fact:
    uptimekuma_networks:
      - name: "{{ web_network_name | default('web') }}"
    uptimekuma_ports:
      # Published ports to expose outside the container
      # host port:container port
      - "{{ uptimekuma_service_port }}:3001"
    uptimekuma_volumes:
      # Local paths to mount into the container
      # local path:container path
      - "{{ uptimekuma_volume_name }}:/app/data"
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

- name: deploy-uptimekuma | Create Uptime Kuma container labels
  ansible.builtin.set_fact:
    uptimekuma_container_labels: "{{ uptimekuma_container_labels | default({}) | combine({item.key: item.value}) }}"
  with_items:
    # ---------------------------------------------------------------
    # Traefik labels
    - { "key": "traefik.enable", "value": "true" }
    - {
      "key": "traefik.http.routers.{{ uptimekuma_service_name }}.entrypoints",
      "value": "websecure",
    }
    - {
      "key": "traefik.http.routers.{{ uptimekuma_service_name }}.rule",
      "value": "Host(`{{ uptimekuma_fqdn }}`)",
    }
    # ---------------------------------------------------------------
    # What's up Docker? labels
    - { "key": "wud.tag.include", "value": '^\d+\.\d+\.\d+-alpine+$$' }
    - {
      "key": "wud.link.template",
      "value": "https://github.com/louislam/uptime-kuma/releases/tag/${major}.${minor}.${patch}",
    }
    # ---------------------------------------------------------------
    # Docker Volume Backup labels
    - { "key": "docker-volume-backup.stop-during-backup", "value": "true" }
    # ---------------------------------------------------------------
    # Homepage labels
    - { "key": "homepage.group", "value": "Monitoring" }
    - { "key": "homepage.name", "value": "Uptimekuma" }
    - { "key": "homepage.description", "value": "Is everything running?" }
    - { "key": "homepage.icon", "value": "uptime-kuma.png" }
    - { "key": "homepage.href", "value": "https://{{ uptimekuma_fqdn }}/" }
    - {
      "key": "homepage.siteMonitor",
      "value": "https://{{ uptimekuma_fqdn }}/",
    }
    - { "key": "homepage.widget.type", "value": "uptimekuma" }
    - { "key": "homepage.widget.url", "value": "https://{{ uptimekuma_fqdn }}" }
    - { "key": "homepage.widget.slug", "value": "homelab" }

- name: deploy-uptimekuma | Create Uptime Kuma volume
  community.docker.docker_volume:
    name: "{{ uptimekuma_volume_name }}"
    state: present

- name: deploy-uptimekuma | Check if Uptime Kuma is running
  community.docker.docker_container_info:
    name: "{{ uptimekuma_service_name }}"
  register: uptimekuma_state

- name: deploy-uptimekuma | Remove uptimekuma container if changing version
  when:
    - uptimekuma_state.exists
    - uptimekuma_image_tag != uptimekuma_state.container.Config.Image | split(':') | last
  block:
    - name: deploy-uptimekuma | Stop and remove existing Uptime Kuma container
      community.docker.docker_container:
        name: "{{ uptimekuma_service_name }}"
        state: absent

    - name: deploy-uptimekuma | Set update uptimekuma
      ansible.builtin.set_fact:
        uptimekuma_update: true

- name: deploy-uptimekuma | Deploy Uptime Kuma if not running
  when:
    - not uptimekuma_state.exists or (uptimekuma_update | default(false))
  block:
    - name: deploy-uptimekuma | Pull uptimekuma image
      community.docker.docker_image:
        name: "{{ uptimekuma_image }}"
        source: pull

    - name: deploy-uptimekuma | Deploy Uptime Kuma
      community.docker.docker_container:
        name: "{{ uptimekuma_service_name }}"
        image: "{{ uptimekuma_image }}"
        detach: true
        env:
          TZ: "{{ homelab.timezone | default(omit) }}"
        labels: "{{ (uptimekuma_container_labels | default({})) | default(omit) }}"
        networks_cli_compatible: true
        networks: "{{ uptimekuma_networks }}"
        restart: true
        restart_policy: unless-stopped
        state: started
        volumes: "{{ uptimekuma_volumes }}"
      register: uptimekuma_container_state

    - name: deploy-uptimekuma | Wait for Uptime Kuma to accept connections
      ansible.builtin.wait_for:
        host: "{{ uptimekuma_fqdn }}"
        port: 80
        connect_timeout: 1
        delay: 10
        state: started
        timeout: 30
      register: uptimekuma_running
      retries: 10
      until: uptimekuma_running is success
