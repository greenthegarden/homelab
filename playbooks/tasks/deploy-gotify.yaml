---
- name: deploy-gotify | Ensure modern version of Docker is available on host
  ansible.builtin.include_tasks:
    file: tasks/hosts-dependency-check-docker-version.yaml

####### GOTIFY SECTION

# https://hub.docker.com/r/gotify/gotify
# https://gotify.net/docs/traefik
# https://github.com/1RandomDev/homeassistant-gotify

- name: deploy-gotify | Set Gotify facts
  ansible.builtin.set_fact:
    gotify_image: "{{ gotify_image | default('gotify/server:latest') }}"
    gotify_service_name: "{{ gotify_service_name | default('gotify') }}"
    gotify_service_port: "{{ gotify_service_port | default(80) }}"

- name: deploy-gotify | Set Gotify network facts
  ansible.builtin.set_fact:
    gotify_network_name: "{{ gotify_network_name | default(gotify_service_name) }}"

- name: deploy-gotify | Set Gotify volume facts
  ansible.builtin.set_fact:
    gotify_volume_name: "{{ gotify_volume_name | default(gotify_service_name) }}"

- name: deploy-gotify | Set Gotify aggregated facts
  ansible.builtin.set_fact:
    gotify_fqdn: "{{ gotify_service_name }}.{{ ansible_hostname }}.{{ homelab.certificate_domain | default('localdomain') }}"

- name: deploy-gotify | Set Gotify service facts
  ansible.builtin.set_fact:
    gotify_networks:
      - name: "{{ web_network_name | default('web') }}"
    gotify_ports:
      # Published ports to expose outside the container
      # host port:container port
      - "{{ gotify_service_port }}:80"
    gotify_volumes:
      # Local paths to mount into the container
      # local path:container path
      - "{{ gotify_volume_name }}:/gotify/data"

- name: deploy-gotify | Log Gotify configuration
  ansible.builtin.debug:
    msg:
      - "Gotify image: {{ gotify_image }}"
      - "Gotify service name: {{ gotify_service_name }}"
      - "Gotify FQDN: {{ gotify_fqdn }}"
      - "Gotify networks: {{ gotify_networks | default(omit) }}"
      - "Gotify ports: {{ gotify_ports | default(omit) }}"
      - "Gotify volumes: {{ gotify_volumes | default(omit) }}"

- name: deploy-gotify | Create Gotify container labels
  ansible.builtin.set_fact:
    gotify_container_labels: "{{ gotify_container_labels | default({}) | combine({item.key: item.value}) }}"
  with_items:
    # ---------------------------------------------------------------
    # Traefik labels
    - { "key": "traefik.enable", "value": "true" }
    - {
      "key": "traefik.http.routers.{{ gotify_service_name }}.entrypoints",
      "value": "websecure",
    }
    - {
      "key": "traefik.http.routers.{{ gotify_service_name }}.rule",
      "value": "Host(`{{ gotify_fqdn }}`)",
    }
    # ---------------------------------------------------------------
    # What's up Docker? labels
    - { "key": "wud.tag.include", "value": '^\d+\.\d+\.\d+$$' }
    - {
      "key": "wud.link.template",
      "value": "https://github.com/gotify/server/releases/tag/v${major}.${minor}.${patch}",
    }
    # ---------------------------------------------------------------
    # Homepage labels
    - { "key": "homepage.group", "value": "Applications" }
    - { "key": "homepage.name", "value": "Gotify" }
    - { "key": "homepage.description", "value": "A simple server for sending and receiving messages" }
    - { "key": "homepage.icon", "value": "gotify.png" }
    - { "key": "homepage.href", "value": "https://{{ gotify_fqdn }}/" }
    - { "key": "homepage.siteMonitor", "value": "https://{{ gotify_fqdn }}/" }

- name: deploy-gotify | Create Gotify networks
  when: gotify_networks is defined
  community.docker.docker_network:
    name: "{{ item.name }}"
    driver: "{{ item.driver | default('bridge') }}"
    internal: "{{ item.internal | default(false) }}"
    state: present
  loop: "{{ gotify_networks }}"

- name: deploy-gotify | Create Gotify volumes
  when: gotify_volume_name is defined
  community.docker.docker_volume:
    name: "{{ item }}"
    state: present
  loop:
    - "{{ gotify_volume_name }}"

- name: deploy-gotify | Check if Gotify is running
  community.docker.docker_container_info:
    name: "{{ gotify_service_name }}"
  register: gotify_state

- name: deploy-gotify | Remove Gotify container if changing version
  when:
    - gotify_state.exists
    - (gotify_image | split(':') | last) != (gotify_state.container.Config.Image | split(':') | last)
  block:

    - name: deploy-gotify | Stop and remove existing Gotify container
      community.docker.docker_container:
        name: "{{ gotify_service_name }}"
        state: absent

    - name: deploy-gotify | Set update Gotify
      ansible.builtin.set_fact:
        gotify_update: true

- name: deploy-gotify | Deploy Gotify if not running
  when:
    - not gotify_state.exists or (gotify_update | default(false))
  block:

    - name: deploy-gotify | Pull Gotify image
      community.docker.docker_image:
        name: "{{ gotify_image }}"
        source: pull

    - name: deploy-gotify | Deploy Gotify
      community.docker.docker_container:
        name: "{{ gotify_service_name }}"
        image: "{{ gotify_image }}"
        detach: true
        env:
          TZ: "{{ homelab.timezone | default('UTC') }}"
        labels: "{{ gotify_container_labels | default(omit) }}"
        networks_cli_compatible: true
        networks: "{{ gotify_networks }}"
        restart: true
        restart_policy: unless-stopped
        state: started
        volumes: "{{ gotify_volumes }}"
      register: gotify_container_state

- name: deploy-gotify | Wait for Gotify to accept connections
  ansible.builtin.wait_for:
    host: "{{ gotify_fqdn }}"
    port: 80
    connect_timeout: 1
    delay: 10
    state: started
    timeout: 30
  register: gotify_running
  retries: 10
  until: gotify_running is success
