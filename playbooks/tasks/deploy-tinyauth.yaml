---
- name: deploy-tinyauth | Ensure modern version of Docker is available on host
  ansible.builtin.include_tasks:
    file: tasks/hosts-dependency-check-docker-version.yaml

####### TINYAUTH SECTION

# https://tinyauth.app/docs/getting-started.html

- name: deploy-tinyauth | Set Tinyauth facts
  ansible.builtin.set_fact:
    tinyauth_image: "{{ tinyauth_image | default('ghcr.io/steveiliop56/tinyauth:v3') }}"
    tinyauth_service_name: "{{ tinyauth_service_name | default('tinyauth') }}"
    tinyauth_service_port: "{{ tinyauth_service_port | default(3000) }}"

- name: deploy-tinyauth | Set Tinyauth network facts
  ansible.builtin.set_fact:
    tinyauth_network_name: "{{ tinyauth_network_name | default(tinyauth_service_name) }}"

- name: deploy-tinyauth | Set Tinyauth volume facts
  ansible.builtin.set_fact:
    tinyauth_volume_name: "{{ tinyauth_volume_name | default(tinyauth_service_name) }}"

- name: deploy-tinyauth | Set Tinyauth aggregated facts
  ansible.builtin.set_fact:
    tinyauth_fqdn: "{{ tinyauth_service_name }}.{{ ansible_hostname }}.{{ homelab.certificate_domain | default('localdomain') }}"

- name: deploy-tinyauth | Set Tinyauth service facts
  ansible.builtin.set_fact:
    tinyauth_networks:
      # Reverse Proxy  network is used to expose applications via Traefik
      - { name: "{{ reverse_proxy_network_name | default('reverse-proxy') }}" }
    tinyauth_ports:
      # Published ports to expose outside the container
      # host port:container port
      - "{{ tinyauth_service_port }}:3000"
    tinyauth_volumes: []
      # Local paths to mount into the container
      # local path:container path

- name: deploy-tinyauth | Log Tinyauth configuration
  ansible.builtin.debug:
    msg:
      - "Tinyauth image: {{ tinyauth_image }}"
      - "Tinyauth service name: {{ tinyauth_service_name }}"
      - "Tinyauth FQDN: {{ tinyauth_fqdn }}"
      - "Tinyauth networks: {{ tinyauth_networks | default(omit) }}"
      - "Tinyauth ports: {{ tinyauth_ports | default(omit) }}"
      - "Tinyauth volumes: {{ tinyauth_volumes | default(omit) }}"

- name: deploy-tinyauth | Create Tinyauth container labels
  ansible.builtin.set_fact:
    tinyauth_container_labels: "{{ tinyauth_container_labels | default({}) | combine({item.key: item.value}) }}"
  with_items:
    # ---------------------------------------------------------------
    # Traefik labels
    - { "key": "traefik.enable", "value": "true" }
    - {
      "key": "traefik.http.routers.{{ tinyauth_service_name }}.entrypoints",
      "value": "{{ traefik_entrypoint_secure_name }}",
    }
    - {
      "key": "traefik.http.routers.{{ tinyauth_service_name }}.rule",
      "value": "Host(`{{ tinyauth_fqdn }}`)",
    }
    - {
      "key": "traefik.http.middlewares.{{ tinyauth_service_name }}.forwardauth.address",
      "value": "http://tinyauth:3000/api/auth/traefik",
    }
    # ---------------------------------------------------------------
    # Tinyauth labels
    - { "key": "wud.tag.include", "value": '^\d+\.\d+\.\d+$$' }
    - {
      "key": "wud.link.template",
      "value": "https://github.com/tinyauth/tinyauth/releases/tag/v${major}.${minor}.${patch}",
    }

- name: deploy-tinyauth | Create Tinyauth networks
  when: tinyauth_networks is defined
  community.docker.docker_network:
    name: "{{ item.name }}"
    driver: "{{ item.driver | default('bridge') }}"
    internal: "{{ item.internal | default(false) }}"
    state: present
  loop: "{{ tinyauth_networks }}"

- name: deploy-tinyauth | Create Tinyauth volumes
  when: tinyauth_volume_name is defined and (tinyauth_volumes | length > 0)
  community.docker.docker_volume:
    name: "{{ item }}"
    state: present
  loop:
    - "{{ tinyauth_volume_name }}"

- name: deploy-tinyauth | Pull Tinyauth image
  community.docker.docker_image:
    name: "{{ tinyauth_image }}"
    source: pull

- name: deploy-tinyauth | Deploy Tinyauth
  community.docker.docker_container:
    name: "{{ tinyauth_service_name }}"
    image: "{{ tinyauth_image }}"
    detach: true
    env:
      SECRET: "{{ tinyauth.secret }}"
      APP_URL: "https://{{ tinyauth_fqdn }}"
      USERS: "{{ tinyauth.username }}:{{ tinyauth.password_hash }}"
      # USERS: "{{ tinyauth.username }}:{{ tinyauth.password_hash | default(tinyauth.password | password_hash('bcrypt')) }}"
    labels: "{{ tinyauth_container_labels | default(omit) }}"
    networks_cli_compatible: true
    networks: "{{ tinyauth_networks | ansible.utils.remove_keys(target=['internal']) | default(omit) }}"
    recreate: true
    restart: true
    restart_policy: unless-stopped
    state: started
    volumes: "{{ default_host_volumes + tinyauth_volumes | default(omit) }}"
  register: tinyauth_container_state
