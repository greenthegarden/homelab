---

- name: deploy-grist | Ensure modern version of Docker is available on host
  ansible.builtin.include_tasks:
    file: tasks/hosts-dependency-check-docker-version.yaml

- name: deploy-grist | Ensure required Grist variables are set
  ansible.builtin.assert:
    that:
      - grist.admin_password is defined
      - grist.admin_email is defined
    fail_msg: "One or more required grist variables are not defined! Please define them in your inventory or group_vars/host_vars."

####### GRIST SECTION

# https://support.getgrist.com/self-managed/#what-is-self-hosted-grist

- name: deploy-grist | Set Grist facts
  ansible.builtin.set_fact:
    grist_image: "{{ grist_image | default('gristlabs/grist:latest') }}"
    grist_service_name: "{{ grist_service_name | default('grist') }}"
    grist_service_port: "{{ grist_service_port | default(8484) }}"

- name: deploy-grist | Set Grist network facts
  ansible.builtin.set_fact:
    grist_network_name: "{{ grist_network_name | default(grist_service_name) }}"

- name: deploy-grist | Set Grist volume facts
  ansible.builtin.set_fact:
    grist_volume_name: "{{ grist_volume_name | default(grist_service_name) }}"

- name: deploy-grist | Set Grist aggregated facts
  ansible.builtin.set_fact:
    grist_fqdn: "{{ grist_service_name }}.{{ ansible_hostname }}.{{ homelab.certificate_domain | default('localdomain') }}"

- name: deploy-grist | Set Grist service facts
  ansible.builtin.set_fact:
    grist_networks:
      # Reverse Proxy  network is used to expose applications via Traefik
      - { name: "{{ reverse_proxy_network_name | default('reverse-proxy') }}" }
    grist_ports:
      # Published ports to expose outside the container
      # host port:container port
      - "{{ grist_service_port }}:8484"
    grist_volumes:
      # Local paths to mount into the container
      # local path:container path
      - "{{ grist_volume_name }}:/persist"

- name: deploy-grist | Log Grist configuration
  ansible.builtin.debug:
    msg:
      - "Grist image: {{ grist_image }}"
      - "Grist service name: {{ grist_service_name }}"
      - "Grist FQDN: {{ grist_fqdn }}"
      - "Grist networks: {{ grist_networks | default(omit) }}"
      - "Grist ports: {{ grist_ports | default(omit) }}"
      - "Grist volumes: {{ grist_volumes | default(omit) }}"

- name: deploy-grist | Create Grist container labels
  ansible.builtin.set_fact:
    grist_container_labels: "{{ grist_container_labels | default({}) | combine({item.key: item.value}) }}"
  with_items:
    # ---------------------------------------------------------------
    # Homepage labels
    - { "key": "homepage.group", "value": "Applications" }
    - { "key": "homepage.name", "value": "Grist" }
    - { "key": "homepage.description", "value": "Grist is a software product to organize, analyze, and share data." }
    - { "key": "homepage.icon", "value": "grist.png" }
    - { "key": "homepage.href", "value": "https://{{ grist_fqdn }}/" }
    - { "key": "homepage.siteMonitor", "value": "https://{{ grist_fqdn }}/" }
    # ---------------------------------------------------------------
    # Traefik labels
    - { "key": "traefik.enable", "value": "true" }
    - {
      "key": "traefik.http.routers.{{ grist_service_name }}.entrypoints",
      "value": "{{ traefik_entrypoint_secure_name }}",
    }
    - {
      "key": "traefik.http.routers.{{ grist_service_name }}.rule",
      "value": "Host(`{{ grist_fqdn }}`)",
    }
    # ---------------------------------------------------------------
    # What's up Docker? labels
    - { "key": "wud.tag.include", "value": '^\d+\.\d+\.\d+$$' }
    - {
      "key": "wud.link.template",
      "value": "https://github.com/gristlabs/grist-core/releases/tag/v${major}.${minor}.${patch}",
    }

- name: deploy-grist | Create Grist networks
  when: grist_networks is defined
  community.docker.docker_network:
    name: "{{ item.name }}"
    driver: "{{ item.driver | default('bridge') }}"
    internal: "{{ item.internal | default(false) }}"
    state: present
  loop: "{{ grist_networks }}"

- name: deploy-grist | Create Grist volumes
  when: grist_volume_name is defined and (grist_volumes | length > 0)
  community.docker.docker_volume:
    name: "{{ item }}"
    state: present
  loop:
    - "{{ grist_volume_name }}"

- name: deploy-grist | Check if Grist is running
  community.docker.docker_container_info:
    name: "{{ grist_service_name }}"
  register: grist_state

- name: deploy-grist | Remove Grist container if changing version
  when:
    - grist_state.exists
    - (grist_image | split(':') | last) != (grist_state.container.Config.Image | split(':') | last)
  block:

    - name: deploy-grist | Stop and remove existing Grist container
      community.docker.docker_container:
        name: "{{ grist_service_name }}"
        state: absent

    - name: deploy-grist | Set update Grist
      ansible.builtin.set_fact:
        grist_update: true

- name: deploy-grist | Deploy Grist if not running
  when:
    - not grist_state.exists or (grist_update | default(false))
  block:

    - name: deploy-grist | Pull Grist image
      community.docker.docker_image:
        name: "{{ grist_image }}"
        source: pull

    - name: deploy-grist | Deploy Grist
      community.docker.docker_container:
        name: "{{ grist_service_name }}"
        image: "{{ grist_image }}"
        detach: true
        env:
          GRIST_APP_URL: "https://{{ grist_fqdn }}/"
          GRIST_SESSION_SECRET: "{{ grist.admin_password | default('dummy') }}"
          GRIST_DEFAULT_EMAIL: "{{ grist.admin_email | default('admin@' + grist_fqdn) }}"
          TZ: "{{ homelab.timezone | default('UTC') }}"
        labels: "{{ grist_container_labels | default(omit) }}"
        networks_cli_compatible: true
        networks: "{{ grist_networks | ansible.utils.remove_keys(target=['internal']) | default(omit) }}"
        restart: true
        restart_policy: unless-stopped
        state: started
        volumes: "{{ default_host_volumes + grist_volumes | default(omit) }}"
      register: grist_container_state

- name: deploy-grist | Wait for Grist to accept connections
  ansible.builtin.wait_for:
    host: "{{ grist_fqdn }}"
    port: 80
    connect_timeout: 1
    delay: 10
    state: started
    timeout: 30
  register: grist_running
  retries: 10
  until: grist_running is success
