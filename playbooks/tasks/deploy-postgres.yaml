---
- name: deploy-postgres | Ensure modern version of Docker is available on host
  ansible.builtin.include_tasks:
    file: tasks/hosts-dependency-check-docker-version.yaml

- name: deploy-postgres | Ensure required Postgres variables are set
  ansible.builtin.assert:
    that:
      - postgres_database is defined
      - postgres_user is defined
      - postgres_password is defined
    fail_msg: "One or more required Docmost variables are not defined! Please define them in your inventory or group_vars/host_vars."

####### POSTGRES SECTION

# http://www.postgres.com/
# https://github.com/postgres/postgres-server
# https://hub.docker.com/_/postgres

- name: deploy-postgres | Set Postgres facts
  ansible.builtin.set_fact:
    postgres_image: "{{ postgres_image | default('postgres:latest') }}"
    postgres_service_name: "{{ postgres_service_name | default('postgres') }}"
    postgres_service_port: "{{ postgres_service_port | default(5432) }}"

- name: deploy-postgres | Set Postgres network facts
  ansible.builtin.set_fact:
    postgres_network_name: "{{ postgres_network_name | default(postgres_service_name) }}"

- name: deploy-postgres | Set Postgres volume facts
  ansible.builtin.set_fact:
    postgres_volume_name: "{{ postgres_volume_name | default(postgres_service_name) }}"

- name: deploy-postgres | Set Postgres aggregated facts
  ansible.builtin.set_fact:
    postgres_fqdn: "{{ postgres_service_name }}.{{ ansible_hostname }}.{{ homelab.certificate_domain | default('localdomain') }}"

- name: deploy-postgres | Set Postgres service facts
  ansible.builtin.set_fact:
    postgres_networks:
      - { name: "{{ postgres_network_name }}" }
    postgres_ports:
      # Published ports to expose outside the container
      # host port:container port
      - "{{ postgres_service_port }}:5432"
    postgres_volumes:
      # Local paths to mount into the container
      # local path:containerpath
      - "{{ postgres_volume_name }}:/var/lib/postgresql/data"

- name: deploy-postgres | Log Postgres configuration
  ansible.builtin.debug:
    msg:
      - "Postgres image: {{ postgres_image }}"
      - "Postgres service name: {{ postgres_service_name }}"
      - "Postgres FQDN: {{ postgres_fqdn }}"
      - "Postgres networks: {{ postgres_networks | default(omit) }}"
      - "Postgres ports: {{ postgres_ports | default(omit) }}"
      - "Postgres volumes: {{ postgres_volumes | default(omit) }}"

- name: deploy-postgres | Create Postgres container labels
  ansible.builtin.set_fact:
    postgres_container_labels: "{{ postgres_container_labels | default({}) | combine({item.key: item.value}) }}"
  with_items:
    # ---------------------------------------------------------------
    # What's up Docker? labels
    - { "key": "wud.tag.include", "value": '^\d+\.\d+\.\d+$$' }
    - {
      "key": "wud.link.template",
      "value": "https://github.com/postgres/postgres/releases/tag/REL_${major}_${minor}",
    }

# Create required Docker networks
- name: deploy-postgres | Create Postgres networks
  when: postgres_networks is defined
  community.docker.docker_network:
    name: "{{ item.name }}"
    driver: "{{ item.driver | default('bridge') }}"
    internal: "{{ item.internal | default(false) }}"
    state: present
  loop: "{{ postgres_networks }}"

# Create required Docker volumes
- name: deploy-postgres | Create Postgres volumes
  when: postgres_volume_name is defined
  community.docker.docker_volume:
    name: "{{ item }}"
    state: present
  loop:
    - "{{ postgres_volume_name }}"

- name: deploy-postgres | Check if Postgres is running
  community.docker.docker_container_info:
    name: "{{ postgres_service_name }}"
  register: postgres_state

- name: deploy-postgres | Remove Postgres container if changing version
  when:
    - postgres_state.exists
    - (postgres_image | split(':') | last) != (postgres_state.container.Config.Image | split(':') | last)
  block:

    - name: deploy-postgres | Stop and remove existing Postgres container
      community.docker.docker_container:
        name: "{{ postgres_service_name }}"
        state: absent

    - name: deploy-postgres | Set update Postgres
      ansible.builtin.set_fact:
        postgres_update: true

- name: deploy-postgres | Deploy Postgres if not running
  when:
    - not postgres_state.exists or (postgres_update | default(false))
  block:

    - name: deploy-postgres | Pull Postgres image
      community.docker.docker_image:
        name: "{{ postgres_image }}"
        source: pull

    - name: deploy-postgres | Deploy Postgres
      community.docker.docker_container:
        name: "{{ postgres_service_name }}"
        image: "{{ postgres_image }}"
        command: "{{ postgres_args | default(omit) }}"
        detach: true
        env:
          # Creates a new superuser with this name (defaults to "postgres" if not specified).
          POSTGRES_USER: "{{ postgres_user | default('postgres') }}"
          # Set the password for the PostgreSQL superuser (required).
          POSTGRES_PASSWORD: "{{ postgres_password | default('dummy') }}"
          # Creates a new database with this name (defaults to the username if not specified).
          POSTGRES_DB: "{{ postgres_database | default('postgres') }}"
          TZ: "{{ homelab.timezone | default('UTC') }}"
        labels: "{{ postgres_container_labels | default(omit) }}"
        networks_cli_compatible: true
        networks: "{{ postgres_networks | default(omit) }}"
        restart: true
        restart_policy: unless-stopped
        state: started
        volumes: "{{ default_host_volumes + postgres_volumes | default(omit) }}"
      register: postgres_container_state
