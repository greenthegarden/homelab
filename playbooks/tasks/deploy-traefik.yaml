---
- name: deploy-traefik | Ensure modern version of Docker is available on host
  ansible.builtin.include_tasks:
    file: tasks/hosts-dependency-check-docker-version.yaml

# https://stackoverflow.com/questions/58554731/traefik-v2-0-metrics-with-prometheus
# https://doc.traefik.io/traefik/reference/static-configuration/env/
# https://medium.com/@joshuaavalon/setup-traefik-v2-step-by-step-fae44ed8f76d
# https://github.com/scafer/traefik-duckdns-letsencrypt/tree/main
# https://community.traefik.io/t/failing-to-get-certs-over-dns-challenge/25653

- name: deploy-traefik | Set Traefik facts
  ansible.builtin.set_fact:
    traefik_image: "{{ traefik_image | default('traefik:latest') }}"
    traefik_service_name: "{{ traefik_service_name | default('traefik') }}"
    traefik_service_port_http: "{{ traefik_service_port_http | default(80) }}"
    traefik_service_port_secure: "{{ traefik_service_port_https | default(443) }}"
    traefik_provider: "{{ traefik_provider | default('docker') }}"
    traefik_volume_letsencrypt_name: "{{ traefik_volume_letsencrypt_name | default('letsencrypt') }}"

- name: deploy-traefik | Set Traefik aggregated facts
  ansible.builtin.set_fact:
    traefik_fqdn: "{{ traefik_service_name }}.{{ ansible_hostname }}.{{ homelab.lan_domain | default('localdomain') }}"

# https://github.com/karvounis/traefik-tutorial-docker-compose-files/blob/master/standalone/advanced/docker-compose.ping.yml
# https://github.com/ChristianLempa/homelab/blob/main/traefik/traefik-demo-1/config/traefik.yaml


- name: deploy-traefik | Set Traefik service facts
  ansible.builtin.set_fact:

    traefik_command:
      #### These are the CLI commands that will configure Traefik and tell it how to work! ####

      ## API Settings - https://docs.traefik.io/operations/api/, endpoints - https://docs.traefik.io/operations/api/#endpoints ##
      ## ---------------------------------------------------------------
      - "--api.dashboard=true" # <== Enabling the dashboard to view services, middlewares, routers, etc...
      - "--api.insecure=true" # <== Enabling insecure api, NOT RECOMMENDED FOR PRODUCTION
      - "--api.debug=true" # <== Enabling additional endpoints for debugging and profiling

      ## Certificate Settings (Let's Encrypt) -  https://docs.traefik.io/https/acme/#configuration-examples ##
      ## ---------------------------------------------------------------
      - "--certificatesResolvers.letsencrypt.acme.email={{ acme.email }}"
      - "--certificatesResolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"

      - "--certificatesresolvers.letsencrypt.acme.dnsChallenge=true"
      - "--certificatesResolvers.letsencrypt.acme.dnsChallenge.provider={{ acme.provider }}"
      - "--certificatesresolvers.letsencrypt.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53"
      - "--certificatesresolvers.letsencrypt.acme.dnsChallenge.propagation.delayBeforeChecks=30s"

      # CA server to use.
      # Uncomment the line to use Let's Encrypt's staging server,
      # leave commented to go to prod.
      #
      # Optional
      # Default: "https://acme-v02.api.letsencrypt.org/directory"
      # - "--certificatesResolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory"

      ## Docker Provider Settings - https://docs.traefik.io/providers/docker/#provider-configuration ##
      ## https://medium.com/@containeroo/traefik-2-0-paranoid-about-mounting-var-run-docker-sock-22da9cb3e78c
      ## ---------------------------------------------------------------
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--providers.docker.endpoint=tcp://{{ docker_socket_proxy_service_name }}:{{ docker_socket_proxy_service_port }}"
      - "--providers.docker.network={{ web_network_name }}"
      - "--providers.docker.watch=true"

      ## Entrypoints Settings - https://docs.traefik.io/routing/entrypoints/#configuration ##
      ## ---------------------------------------------------------------
      ## http entrypoints
      - "--entryPoints.web.address=:10080" # <== Defining an entrypoint for port :80 named web
      - "--entryPoints.web.http.redirections.entryPoint.to=websecure"
      - "--entryPoints.web.http.redirections.entryPoint.scheme=https"
      ## https entrypoints
      - "--entryPoints.websecure.address=:10443"
      ## Set up the TLS configuration for the websecure entrypoint
      - "--entryPoints.websecure.http.tls=true" # <== Enabling TLS for the websecure entrypoint
      - "--entryPoints.websecure.http.tls.certResolver=letsencrypt" # <== Using the Let's Encrypt resolver for TLS certificates
      - "--entryPoints.websecure.http.tls.domains[0].main={{ homelab.domain }}" # <== Main domain for TLS
      - "--entryPoints.websecure.http.tls.domains[0].sans=*.{{ homelab.domain }}" # <== Subject Alternative Names for TLS
      ##
      - "--serversTransport.insecureSkipVerify=true"

      ## Global settings
      ## ---------------------------------------------------------------
      - "--global.checkNewVersion=false"
      - "--global.sendAnonymousUsage=false"

      ## Log Settings (options: ERROR, DEBUG, PANIC, FATAL, WARN, INFO) - https://docs.traefik.io/observability/logs/ ##
      ## ---------------------------------------------------------------
      - "--log.level=DEBUG" # <== Setting the level of the logs from traefik
      - "--log.format=json"

      # Configure ping for health check
      ## ---------------------------------------------------------------
      - "--ping=true"

      # # ## Prometheus metrics - https://doc.traefik.io/traefik/observability/metrics/prometheus/
      ## ---------------------------------------------------------------
      # - "--entryPoints.metrics.address=:8082"
      # - "--metrics.prometheus=true"
      # - "--metrics.prometheus.addServicesLabels=true"
      # # ## Create a manual router instead of the default one
      # - --metrics.prometheus.manualRouting=true
      # - --metrics.prometheus.addRoutersLabels=true
      # - "--metrics.prometheus.entryPoint=metrics"
      # - "--metrics.prometheus.addEntryPointsLabels=true"

    traefik_networks:
      - name: "{{ docker_socket_proxy_network_name | default('docker-socket-proxy') }}"
      - name: "{{ monitoring_network_name | default('monitoring') }}"
      - name: "{{ web_network_name | default('web') }}" # <== Placing traefik on the network named web, to access containers on this network

    traefik_ports:
      # Published ports to expose outside the container
      # host port:container port
      # use high ports inside the container so
      # we don't need to be root to bind the ports
      - "{{ traefik_service_port_http }}:10080"
      - "{{ traefik_service_port_https }}:10443"

    traefik_volumes:
      # Local paths to mount into the container
      # local path:container path
      - /root/letsencrypt:/letsencrypt:rw
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

- name: deploy-traefik | Create Traefik container labels
  ansible.builtin.set_fact:
    traefik_container_labels: "{{ traefik_container_labels | default({}) | combine({item.key: item.value}) }}"
  with_items:
    # ---------------------------------------------------------------
    # Traefik configuration labels to override default static configuration
    - { "key": "traefik.enable", "value": "true" }
    - {
      "key": "traefik.http.middlewares.traefik-auth.basicauth.users",
      "value": "{{ traefik.dashboard_credentials }}",
    }
    - {
      "key": "traefik.http.routers.{{ traefik_service_name }}.entrypoints",
      "value": "websecure",
    }
    - {
      "key": "traefik.http.routers.{{ traefik_service_name }}.rule",
      "value": "Host(`{{ traefik_fqdn }}`)",
    }
    - {
      "key": "traefik.http.routers.{{ traefik_service_name }}.service",
      "value": "api@internal",
    }

    # ---------------------------------------------------------------
    # Traefik metrics router configuration
    # - {
    #   "key": "traefik.http.routers.metrics.rule",
    #   "value": "Host(`{{ traefik_fqdn }}`) && PathPrefix(`/metrics`)",
    # }
    # - { "key": "traefik.http.routers.metrics.tls", "value": "true" }
    # - {
    #   "key": "traefik.http.routers.metrics.entrypoints",
    #   "value": "websecure",
    # }
    # - {
    #   "key": "traefik.http.routers.metrics.service",
    #   "value": "prometheus@internal",
    # }

    # ---------------------------------------------------------------
    # What's up Docker? labels
    - { "key": "wud.tag.include", "value": '^\d+\.\d+\.\d+$$' }
    - {
      "key": "wud.link.template",
      "value": "https://github.com/traefik/traefik/releases/tag/v${major}.${minor}.${patch}",
    }

- name: deploy-traefik | Create acme directory
  ansible.builtin.file:
    path: /root/letsencrypt
    mode: "644"
    state: directory
  register: acme_directory_creation

- name: deploy-traefik | Create acme configuration file
  ansible.builtin.file:
    path: /root/letsencrypt/acme.json
    state: touch
    mode: "600"
  register: acme_configuration_creation

- name: deploy-traefik | Pull image
  community.docker.docker_image:
    name: "{{ traefik_image }}"
    source: pull

- name: deploy-traefik | Deploy Traefik with Docker as provider
  when: traefik_provider == "docker"
  community.docker.docker_container:
    name: "{{ traefik_service_name }}"
    image: "{{ traefik_image }}"
    command: "{{ traefik_command }}"
    detach: true
    env:
      # Cloudflare API credentials for DNS challenge
      ## For details see https://go-acme.github.io/lego/dns/cloudflare/
      CF_DNS_API_TOKEN: "{{ acme.cloudflare.dns_api_token }}"
      CF_API_EMAIL: "{{ acme.cloudflare.api_email }}" # <== Should not need this if using token
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels: "{{ traefik_container_labels }}"
    networks: "{{ traefik_networks }}"
    published_ports: "{{ traefik_ports }}"
    recreate: true # Recreate to ensure any configuration changes are used
    restart: true
    restart_policy: unless-stopped
    security_opts:
      - "no-new-privileges:true"
    state: started
    volumes: "{{ traefik_volumes }}"
  register: traefik_container_state
# - name: deploy-traefik | Wait for Traefik to accept connections
#   ansible.builtin.wait_for:
#     host: "{{ traefik_fqdn }}"
#     port: "{{ traefik_service_port | default(80) }}"
#     connect_timeout: 1
#     delay: 10
#     state: started
#     timeout: 30
#   register: traefik_running
#   until: traefik_running is success
#   retries: 10
