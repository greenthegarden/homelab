---
- name: deploy-traefik | Ensure modern version of Docker is available on host
  ansible.builtin.include_tasks:
    file: tasks/hosts-dependency-check-docker-version.yaml

# https://stackoverflow.com/questions/58554731/traefik-v2-0-metrics-with-prometheus
# https://doc.traefik.io/traefik/reference/static-configuration/env/
# https://medium.com/@joshuaavalon/setup-traefik-v2-step-by-step-fae44ed8f76d
# https://github.com/scafer/traefik-duckdns-letsencrypt/tree/main

- name: deploy-traefik | Set Traefik facts
  ansible.builtin.set_fact:
    traefik_image: "{{ traefik_image | default('traefik:latest') }}"
    traefik_service_name: "{{ traefik_service_name | default('traefik') }}"
    traefik_service_port_http: "{{ traefik_service_port_http | default(80) }}"
    traefik_service_port_secure: "{{ traefik_service_port_secure | default(443) }}"
    traefik_provider: "{{ traefik_provider | default('docker') }}"
    traefik_volume_letsencrypt_name: "{{ traefik_volume_letsencrypt_name | default('letsencrypt') }}"

- name: deploy-traefik | Set Traefik aggregated facts
  ansible.builtin.set_fact:
    traefik_fqdn: "{{ traefik_service_name }}.{{ ansible_hostname }}.{{ homelab.lan_domain | default('localdomain') }}"

# https://github.com/karvounis/traefik-tutorial-docker-compose-files/blob/master/standalone/advanced/docker-compose.ping.yml
# https://github.com/ChristianLempa/homelab/blob/main/traefik/traefik-demo-1/config/traefik.yaml

- name: deploy-traefik | Set Traefik service facts
  ansible.builtin.set_fact:

    traefik_command:
      #### These are the CLI commands that will configure Traefik and tell it how to work! ####

      ## API Settings - https://docs.traefik.io/operations/api/, endpoints - https://docs.traefik.io/operations/api/#endpoints ##
      - "--api.dashboard=true" # <== Enabling the dashboard to view services, middlewares, routers, etc...
      - "--api.insecure=true" # <== Enabling insecure api, NOT RECOMMENDED FOR PRODUCTION
      - "--api.debug=true" # <== Enabling additional endpoints for debugging and profiling

      ## Certificate Settings (Let's Encrypt) -  https://docs.traefik.io/https/acme/#configuration-examples ##
      - "--certificatesresolvers.cloudflare.acme.dnschallenge=true"
      - "--certificatesResolvers.cloudflare.acme.dnsChallenge.provider=cloudflare"
      - "--certificatesResolvers.cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,8.8.8.8:53"
      # - "--certificatesresolvers.cloudflare.acme.dnschallenge.propagation.delayBeforeChecks=60s"
      - "--certificatesResolvers.cloudflare.acme.storage=/letsencrypt/acme.json"

      # CA server to use.
      # Uncomment the line to use Let's Encrypt's staging server,
      # leave commented to go to prod.
      #
      # Optional
      # Default: "https://acme-v02.api.letsencrypt.org/directory"
      # - "--certificatesResolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory"

      ## Docker Provider Settings - https://docs.traefik.io/providers/docker/#provider-configuration ##
      - "--providers.docker=true"
      # https://medium.com/@containeroo/traefik-2-0-paranoid-about-mounting-var-run-docker-sock-22da9cb3e78c
      - "--providers.docker.exposedByDefault=false"
      - "--providers.docker.endpoint=tcp://{{ docker_socket_proxy_service_name }}:{{ docker_socket_proxy_service_port }}"
      - "--providers.docker.network={{ web_network_name }}"
      - "--providers.docker.watch=true"

      ## Entrypoints Settings - https://docs.traefik.io/routing/entrypoints/#configuration ##
      - "--entryPoints.web.address=:10080" # <== Defining an entrypoint for port :80 named web
      - "--entryPoints.web.http.redirections.entryPoint.to=websecure"
      - "--entryPoints.web.http.redirections.entryPoint.scheme=https"
      - "--entryPoints.websecure.address=:10443"
      - "--serversTransport.insecureSkipVerify=true"

      ## Global settings
      - "--global.checkNewVersion=false"
      - "--global.sendAnonymousUsage=false"

      ## Log Settings (options: ERROR, DEBUG, PANIC, FATAL, WARN, INFO) - https://docs.traefik.io/observability/logs/ ##
      - "--log.level=INFO" # <== Setting the level of the logs from traefik
      - "--log.format=json"

      # Configure ping for health check
      - "--ping=true"

      # # ## Prometheus metrics - https://doc.traefik.io/traefik/observability/metrics/prometheus/
      # - "--entryPoints.metrics.address=:8082"
      # - "--metrics.prometheus=true"
      # - "--metrics.prometheus.addServicesLabels=true"
      # # ## Create a manual router instead of the default one
      # - --metrics.prometheus.manualRouting=true
      # - --metrics.prometheus.addRoutersLabels=true
      # - "--metrics.prometheus.entryPoint=metrics"
      # - "--metrics.prometheus.addEntryPointsLabels=true"

    traefik_networks:
      - name: "{{ docker_socket_proxy_network_name | default('docker-socket-proxy') }}"
      - name: "{{ monitoring_network_name | default('monitoring') }}"
      - name: "{{ web_network_name | default('web') }}" # <== Placing traefik on the network named web, to access containers on this network

    traefik_ports:
      # use high ports inside the container so
      # we don't need to be root to bind the ports
      - "{{ traefik_service_port_http }}:10080"
      - "{{ traefik_service_port_secure }}:10443"

    traefik_volumes:
      # - /var/run/docker.sock:/var/run/docker.sock:ro
      # - /root/.env:./env-file:ro
      - /root/letsencrypt:/letsencrypt:rw
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

- name: deploy-traefik | Create Traefik container labels
  ansible.builtin.set_fact:
    traefik_container_labels: "{{ traefik_container_labels | default({}) | combine({item.key: item.value}) }}"
  with_items:
    # - "traefik.enable=true"
    - { "key": "traefik.enable", "value": "true" }
    - { "key": "traefik.docker.network", "value": "{{ web_network_name }}" }

    # Traefik routers for http via port 80
    # - "traefik.http.routers.traefik.entrypoints=http"
    # - "traefik.http.routers.traefik.rule=Host(`traefik.homelab.greenthegarden.com`)"
    # - "traefik.http.routers.traefik.middlewares=traefik-https-redirect"
    - {
      "key": "traefik.http.routers.{{ traefik_service_name }}-http.entrypoints",
      "value": "web",
    }
    - {
      "key": "traefik.http.routers.{{ traefik_service_name }}-http.rule",
      "value": "Host(`{{ traefik_fqdn }}`)",
    }
    - {
      "key": "traefik.http.routers.{{ traefik_service_name }}-http.middlewares",
      "value": "traefik-https-redirect",
    }

    # Traefik middlewares
    # - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_DASHBOARD_CREDENTIALS}"
    # - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"
    # - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
    - {
      "key": "traefik.http.middlewares.traefik-auth.basicauth.users",
      "value": "admin:$$2y$$05$$Dkh7QIkBIex/l3hxH6oCXumT3DaJkbbWDW7cveoRLLrB0syGU5nze",
    }
    - {
      "key": "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme",
      "value": "https",
    }
    - {
      "key": "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto",
      "value": "https",
    }

    # Traefik routers for https (secure) via port 443
    # - "traefik.http.routers.traefik-secure.entrypoints=https"
    # - "traefik.http.routers.traefik-secure.rule=Host(`traefik.hostname.homelab.greenthegarden.com`)"
    # - "traefik.http.routers.traefik-secure.middlewares=traefik-auth"
    - {
      "key": "traefik.http.routers.{{ traefik_service_name }}-https.entrypoints",
      "value": "websecure",
    }
    - {
      "key": "traefik.http.routers.{{ traefik_service_name }}-https.rule",
      "value": "Host(`{{ traefik_fqdn }}`)",
    }
    # - {
    #     "key": "traefik.http.routers.{{ traefik_service_name }}-https.middlewares",
    #     "value": "traefik-auth",
    #   }

    # Traefik secure router TLS configuration
    # - "traefik.http.routers.traefik-secure.tls=true"
    # - "traefik.http.routers.traefik-secure.tls.certresolver=cloudflare"
    # - "traefik.http.routers.traefik-secure.tls.domains[0].main=homelab.greenthegarden.com"
    # - "traefik.http.routers.traefik-secure.tls.domains[0].sans=*.homelab.greenthegarden.com"
    - {
      "key": "traefik.http.routers.{{ traefik_service_name }}-https.tls",
      "value": "true",
    }
    - {
      "key": "traefik.http.routers.{{ traefik_service_name }}-https.tls.certresolver",
      "value": "cloudflare",
    }
    - {
      "key": "traefik.http.routers.{{ traefik_service_name }}-https.tls.domains[0].main",
      "value": "{{ homelab.domain }}",
    }
    - {
      "key": "traefik.http.routers.{{ traefik_service_name }}-https.tls.domains[0].sans",
      "value": "*.{{ homelab.domain }}",
    }
    # - "traefik.http.routers.traefik-secure.service=api@internal"
    - {
      "key": "traefik.http.routers.{{ traefik_service_name }}-https.service",
      "value": "api@internal",
    }
    # Metrics router configuration
    # - {
    #   "key": "traefik.http.routers.metrics.rule",
    #   "value": "Host(`{{ traefik_fqdn }}`) && PathPrefix(`/metrics`)",
    # }
    # - { "key": "traefik.http.routers.metrics.tls", "value": "true" }
    # - {
    #   "key": "traefik.http.routers.metrics.entrypoints",
    #   "value": "websecure",
    # }
    # - {
    #   "key": "traefik.http.routers.metrics.service",
    #   "value": "prometheus@internal",
    # }
    # What's up Docker? labels
    - { "key": "wud.tag.include", "value": '^\d+\.\d+\.\d+$$' }
    - {
      "key": "wud.link.template",
      "value": "https://github.com/traefik/traefik/releases/tag/v${major}.${minor}.${patch}",
    }

- name: deploy-traefik | Create acme directory
  ansible.builtin.file:
    path: /root/letsencrypt
    mode: "644"
    state: directory
  register: acme_directory_creation

- name: deploy-traefik | Create acme configuration file
  ansible.builtin.file:
    path: /root/letsencrypt/acme.json
    state: touch
    mode: "600"
  register: acme_configuration_creation

- name: deploy-traefik | Pull image
  community.docker.docker_image:
    name: "{{ traefik_image }}"
    source: pull

- name: deploy-traefik | Deploy Traefik with Docker as provider
  community.docker.docker_container:
    name: "{{ traefik_service_name }}"
    image: "{{ traefik_image }}"
    command: "{{ traefik_command }}"
    detach: true
    env:
      # Cloudflare API credentials for DNS challenge
      ## For details see https://go-acme.github.io/lego/dns/cloudflare/
      CF_DNS_API_TOKEN: "{{ acme.cloudflare.dns_api_token }}"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels: "{{ traefik_container_labels }}"
    networks: "{{ traefik_networks }}"
    published_ports: "{{ traefik_ports }}"
    recreate: true # Recreate to ensure any configuration changes are used
    restart: true
    restart_policy: unless-stopped
    security_opts:
      - "no-new-privileges:true"
    state: started
    volumes: "{{ traefik_volumes }}"
  register: traefik_container_state
  when: traefik_provider == "docker"
# - name: deploy-traefik | Wait for Traefik to accept connections
#   ansible.builtin.wait_for:
#     host: "{{ traefik_fqdn }}"
#     port: "{{ traefik_service_port | default(80) }}"
#     connect_timeout: 1
#     delay: 10
#     state: started
#     timeout: 30
#   register: traefik_running
#   until: traefik_running is success
#   retries: 10
