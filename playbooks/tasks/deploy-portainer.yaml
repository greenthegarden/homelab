---
- name: deploy-portainer | Ensure modern version of Docker is available on host
  ansible.builtin.include_tasks:
    file: tasks/hosts-dependency-check-docker-version.yaml

####### PORTAINER SECTION

# https://documentation.portainer.io/v2.0/deploy/ceinstalldocker/
# https://docs.portainer.io/start/install/server/docker/linux
# https://docs.portainer.io/advanced/reverse-proxy/traefik

- name: deploy-portainer | Set Portainer facts
  ansible.builtin.set_fact:
    portainer_image: "{{ portainer_image | default('portainer/portainer-ce:latest') }}"
    portainer_service_name: "{{ portainer_service_name | default('portainer') }}"
    portainer_service_port: "{{ portainer_service_port | default(9443) }}"
    portainer_volume_name: "{{ portainer_volume_name | default('portainer') }}"

- name: deploy-portainer | Set Portainer volume facts
  ansible.builtin.set_fact:
    portainer_volume_data_name: "{{ portainer_service_name }}-data"

- name: deploy-portainer | Set Portainer aggregated facts
  ansible.builtin.set_fact:
    portainer_fqdn: "{{ portainer_service_name }}.{{ ansible_hostname }}.{{ homelab.certificate_domain | default('localdomain') }}"

- name: deploy-portainer | Set Portainer service facts
  ansible.builtin.set_fact:
    portainer_networks:
      - name: "{{ portainer_network_name | default('portainer') }}"
      - name: "{{ web_network_name | default('web') }}"
    portainer_volumes:
      # Local paths to mount into the container
      # local path:container path
      - "{{ portainer_volume_data_name }}:/data"

- name: deploy-portainer | Create Portainer container labels
  ansible.builtin.set_fact:
    portainer_container_labels: "{{ portainer_container_labels | default({}) | combine({item.key: item.value}) }}"
  with_items:
    # ---------------------------------------------------------------
    # Traefik labels
    - { "key": "traefik.enable", "value": "true" }
    - {
      "key": "traefik.http.routers.{{ portainer_service_name }}.entrypoints",
      "value": "websecure",
    }
    - {
      "key": "traefik.http.routers.{{ portainer_service_name }}.rule",
      "value": "Host(`{{ portainer_fqdn }}`)",
    }
    - {
      "key": "traefik.http.services.{{ portainer_service_name }}.loadbalancer.server.port",
      "value": "{{ portainer_service_port }}",
    }
    # ---------------------------------------------------------------
    # What's up Docker? labels
    - { "key": "wud.tag.include", "value": '^\d+\.\d+\.\d+-alpine+$$' }
    - {
      "key": "wud.link.template",
      "value": "https://github.com/portainer/portainer/releases/tag/${major}.${minor}.${patch}",
    }
    # ---------------------------------------------------------------
    # Docker Volume Backup labels
    - { "key": "docker-volume-backup.stop-during-backup", "value": "true" }
    # ---------------------------------------------------------------
    # Homepage labels
    - { "key": "homepage.group", "value": "System" }
    - { "key": "homepage.name", "value": "Portainer" }
    - { "key": "homepage.description", "value": "Container management" }
    - { "key": "homepage.icon", "value": "portainer.png" }
    - { "key": "homepage.href", "value": "https://{{ portainer_fqdn }}" }
    - { "key": "homepage.siteMonitor", "value": "https://{{ portainer_fqdn }}" }

- name: deploy-portainer | Create Portainer network  # noqa: syntax-check[unknown-module]
  community.docker.docker_network:
    name: "{{ portainer_network_name }}"

- name: deploy-portainer | Create volume for Portainer # noqa: syntax-check[unknown-module]
  community.docker.docker_volume:
    name: "{{ portainer_volume_data_name }}"

- name: deploy-portainer | Pull Portainer image
  community.docker.docker_image:
    name: "{{ portainer_image }}"
    source: pull

- name: deploy-portainer | Deploy Portainer
  community.docker.docker_container:
    name: "{{ portainer_service_name }}"
    image: "{{ portainer_image }}"
    detach: true
    labels: "{{ portainer_container_labels | default(omit) }}"
    networks_cli_compatible: true
    networks: "{{ portainer_networks | default(omit) }}"
    restart: true
    restart_policy: unless-stopped
    state: started
    volumes: "{{ default_host_volumes + portainer_volumes | default(omit) }}"
  register: portainer_container_state

- name: deploy-portainer | Wait for Portainer to accept connections
  ansible.builtin.wait_for:
    host: "{{ portainer_fqdn }}"
    port: 80
    connect_timeout: 1
    delay: 10
    state: started
    timeout: 30
  register: portainer_running
  until: portainer_running is success
  retries: 10
