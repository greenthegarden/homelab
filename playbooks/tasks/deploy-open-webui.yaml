---

- name: deploy-open-webui | Ensure modern version of Docker is available on host
  ansible.builtin.include_tasks:
    file: tasks/hosts-dependency-check-docker-version.yaml

####### OPEN WEBUI SECTION

- name: deploy-open-webui | Set Open WebUI facts
  ansible.builtin.set_fact:
    open_webui_image: "{{ open_webui_image | default('ghcr.io/open-webui/open-webui:latest') }}"
    open_webui_service_name: "{{ open_webui_service_name | default('open-webui') }}"
    open_webui_service_port: "{{ open_webui_service_port | default(8080) }}"

- name: deploy-open-webui | Set Open WebUI network facts
  ansible.builtin.set_fact:
    open_webui_network_name: "{{ open_webui_network_name | default(open_webui_service_name) }}"

- name: deploy-open-webui | Set Open WebUI volume facts
  ansible.builtin.set_fact:
    open_webui_volume_name: "{{ open_webui_volume_name | default(open_webui_service_name) }}"

- name: deploy-open-webui | Set Open WebUI aggregated facts
  ansible.builtin.set_fact:
    open_webui_fqdn: "{{ open_webui_service_name }}.{{ ansible_hostname }}.{{ homelab.certificate_domain | default('localdomain') }}"

- name: deploy-open-webui | Set Open WebUI service facts
  ansible.builtin.set_fact:
    open_webui_networks:
      - { name: "{{ open_webui_network_name }}" }
      # Reverse Proxy  network is used to expose applications via Traefik
      - { name: "{{ reverse_proxy_network_name | default('reverse-proxy') }}" }
    open_webui_ports:
      # Published ports to expose outside the container
      # host port:container port
      - "{{ open_webui_service_port }}:8080"
    open_webui_volumes:
      # Local paths to mount into the container
      # local path:container path
      - "{{ open_webui_volume_name }}:/app/backend/data"

- name: deploy-open-webui | Log Open WebUI configuration
  ansible.builtin.debug:
    msg:
      - "Open WebUI image: {{ open_webui_image }}"
      - "Open WebUI service name: {{ open_webui_service_name }}"
      - "Open WebUI FQDN: {{ open_webui_fqdn }}"
      - "Open WebUI networks: {{ open_webui_networks | default(omit) }}"
      - "Open WebUI ports: {{ open_webui_ports | default(omit) }}"
      - "Open WebUI volumes: {{ open_webui_volumes | default(omit) }}"

- name: deploy-open-webui | Create Open WebUI container labels
  ansible.builtin.set_fact:
    open_webui_container_labels: "{{ open_webui_container_labels | default({}) | combine({item.key: item.value}) }}"
  with_items:
    # ---------------------------------------------------------------
    # Docker Volume Backup labels
    - { "key": "docker-volume-backup.stop-during-backup", "value": "true" }
    # ---------------------------------------------------------------
    # Homepage labels
    - { "key": "homepage.group", "value": "Applications" }
    - { "key": "homepage.name", "value": "Open WebUI" }
    - { "key": "homepage.description", "value": "AI platform" }
    - { "key": "homepage.icon", "value": "open-webui.png" }
    - { "key": "homepage.href", "value": "https://{{ open_webui_fqdn }}/" }
    - {
      "key": "homepage.siteMonitor",
      "value": "https://{{ open_webui_fqdn }}/",
    }
    # ---------------------------------------------------------------
    # Traefik labels
    - { "key": "traefik.enable", "value": "true" }
    - {
      "key": "traefik.http.routers.{{ open_webui_service_name }}.entrypoints",
      "value": "websecure",
    }
    - {
      "key": "traefik.http.routers.{{ open_webui_service_name }}.rule",
      "value": "Host(`{{ open_webui_fqdn }}`)",
    }
    # ---------------------------------------------------------------
    # What's up Docker? labels
    - { "key": "wud.tag.include", "value": '^\d+\.\d+\.\d+-slim$$' }
    - {
      "key": "wud.link.template",
      "value": "https://github.com/open-webui/open-webui/releases/tag/v${major}.${minor}.${patch}",
    }

- name: deploy-open-webui | Create Open WebUI networks  # noqa: syntax-check[unknown-module]
  when: open_webui_networks is defined
  community.docker.docker_network:
    name: "{{ item.name }}"
    driver: "{{ item.driver | default('bridge') }}"
    internal: "{{ item.internal | default(false) }}"
    state: present
  loop: "{{ open_webui_networks }}"

- name: deploy-open-webui | Create Open WebUI volume
  community.docker.docker_volume:
    name: "{{ open_webui_volume_name }}"
    state: present

- name: deploy-open-webui | Check if Open WebUI is running
  community.docker.docker_container_info:
    name: "{{ open_webui_service_name }}"
  register: open_webui_state

- name: deploy-open-webui | Update Open WebUI container if changing version
  when:
    - open_webui_state.exists
    - (open_webui_image | split(':') | last) != (open_webui_state.container.Config.Image | split(':') | last)
  block:

    - name: deploy-open-webui | Stop and remove existing Open-webui container
      community.docker.docker_container:
        name: "{{ open_webui_service_name }}"
        state: absent

    - name: deploy-open-webui | Set update Open WebUI
      ansible.builtin.set_fact:
        open_webui_update: true

- name: deploy-open-webui | Deploy Open WebUI if not running
  when: not open_webui_state.exists or (open_webui_update | default(false))
  block:

    - name: deploy-open-webui | Pull Open WebUI image
      community.docker.docker_image:
        name: "{{ open_webui_image }}"
        source: pull

    # docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:0.6.13
    - name: deploy-open-webui | Deploy Open WebUI
      community.docker.docker_container:
        name: "{{ open_webui_service_name }}"
        image: "{{ open_webui_image }}"
        detach: true
        env:
          OLLAMA_BASE_URL: "http://ollama:11434"
          ENABLE_RAG_WEB_SEARCH: "True"
          RAG_WEB_SEARCH_ENGINE: "searxng"
          RAG_WEB_SEARCH_RESULT_COUNT: "3"
          RAG_WEB_SEARCH_CONCURRENT_REQUESTS: "10"
          SEARXNG_QUERY_URL: "http://searxng:8080/search?q=<query>"
        etc_hosts:
          host.docker.internal: host-gateway
        labels: "{{ open_webui_container_labels | default(omit) }}"
        networks_cli_compatible: true
        networks: "{{ open_webui_networks | ansible.utils.remove_keys(target=['internal']) | default(omit) }}"
        restart: true
        restart_policy: unless-stopped
        state: started
        volumes: "{{ default_host_volumes + open_webui_volumes | default(omit) }}"
      register: open_webui_container_state

- name: deploy-open-webui | Wait for Open WebUI to accept connections
  ansible.builtin.wait_for:
    host: "{{ open_webui_fqdn }}"
    port: 80
    connect_timeout: 1
    delay: 10
    state: started
    timeout: 30
  register: open_webui_running
  retries: 10
  until: open_webui_running is success
