---
- name: deploy-ollama | Ensure modern version of Docker is available on host
  ansible.builtin.include_tasks:
    file: tasks/hosts-dependency-check-docker-version.yaml

####### OLLAMA SECTION

# https://hub.docker.com/r/ollama/ollama

- name: deploy-ollama | Set Ollama facts
  ansible.builtin.set_fact:
    ollama_image: "{{ ollama_image | default('ollama/ollama:latest') }}"
    ollama_service_name: "{{ ollama_service_name | default('ollama') }}"
    ollama_service_port: "{{ ollama_service_port | default(11434) }}"

- name: deploy-ollama | Set Ollama network facts
  ansible.builtin.set_fact:
    ollama_network_name: "{{ ollama_network_name | default(ollama_service_name) }}"

- name: deploy-ollama | Set Ollama volume facts
  ansible.builtin.set_fact:
    ollama_volume_name: "{{ ollama_volume_name | default(ollama_service_name) }}"

- name: deploy-ollama | Set Ollama aggregated facts
  ansible.builtin.set_fact:
    ollama_fqdn: "{{ ollama_service_name }}.{{ ansible_hostname }}.{{ homelab.certificate_domain | default('localdomain') }}"

- name: deploy-ollama | Set Ollama service facts
  ansible.builtin.set_fact:
    ollama_networks:
      - { name: "{{ ollama_network_name }}" }
      # Reverse Proxy  network is used to expose applications via Traefik
      - { name: "{{ reverse_proxy_network_name | default('reverse-proxy') }}" }
    ollama_ports:
      # Published ports to expose outside the container
      # host port:container port
      - "{{ ollama_service_port }}:11434"
    ollama_volumes:
      # Local paths to mount into the container
      # local path:container path
      - "{{ ollama_volume_name }}:/root/.ollama"

- name: deploy-ollama | Log Ollama configuration
  ansible.builtin.debug:
    msg:
      - "Ollama image: {{ ollama_image }}"
      - "Ollama service name: {{ ollama_service_name }}"
      - "Ollama FQDN: {{ ollama_fqdn }}"
      - "Ollama networks: {{ ollama_networks | default(omit) }}"
      - "Ollama ports: {{ ollama_ports | default(omit) }}"
      - "Ollama volumes: {{ ollama_volumes | default(omit) }}"

- name: deploy-ollama | Create Ollama container labels
  ansible.builtin.set_fact:
    ollama_container_labels: "{{ ollama_container_labels | default({}) | combine({item.key: item.value}) }}"
  with_items:
    # ---------------------------------------------------------------
    # Docker Volume Backup labels
    - { "key": "docker-volume-backup.stop-during-backup", "value": "true" }
    # ---------------------------------------------------------------
    # Traefik labels
    - { "key": "traefik.enable", "value": "true" }
    - {
      "key": "traefik.http.routers.{{ ollama_service_name }}.entrypoints",
      "value": "websecure",
    }
    - {
      "key": "traefik.http.routers.{{ ollama_service_name }}.rule",
      "value": "Host(`{{ ollama_fqdn }}`)",
    }
    # ---------------------------------------------------------------
    # What's up Docker? labels
    - { "key": "wud.tag.include", "value": '^\d+\.\d+\.\d+$$' }
    - {
      "key": "wud.link.template",
      "value": "https://github.com/ollama/ollama/releases/tag/v${major}.${minor}.${patch}",
    }

- name: deploy-ollama | Create Ollama networks
  when: ollama_networks is defined
  community.docker.docker_network:
    name: "{{ item.name }}"
    driver: "{{ item.driver | default('bridge') }}"
    internal: "{{ item.internal | default(false) }}"
    state: present
  loop: "{{ ollama_networks }}"

- name: deploy-ollama | Create Ollama volume
  when: ollama_volume_name is defined
  community.docker.docker_volume:
    name: "{{ item }}"
    state: present
  loop:
    - "{{ ollama_volume_name }}"

- name: deploy-ollama | Check if Ollama is running
  community.docker.docker_container_info:
    name: "{{ ollama_service_name }}"
  register: ollama_state

- name: deploy-ollama | Update Ollama container if changing version
  when:
    - ollama_state.exists
    - (ollama_image | split(':') | last) != (ollama_state.container.Config.Image | split(':') | last)
  block:

    - name: deploy-ollama | Stop and remove existing Ollama container
      community.docker.docker_container:
        name: "{{ ollama_service_name }}"
        state: absent

    - name: deploy-ollama | Set update Ollama
      ansible.builtin.set_fact:
        ollama_update: true

- name: deploy-ollama | Deploy Ollama if not running
  when: not ollama_state.exists or (ollama_update | default(false))
  block:

    - name: deploy-ollama | Pull Ollama image
      community.docker.docker_image:
        name: "{{ ollama_image }}"
        source: pull

    # docker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama
    - name: deploy-ollama | Deploy Ollama
      community.docker.docker_container:
        name: "{{ ollama_service_name }}"
        image: "{{ ollama_image }}"
        detach: true
        env:
          TZ: "{{ homelab.timezone | default('UTC') }}"
        labels: "{{ ollama_container_labels | default(omit) }}"
        networks_cli_compatible: true
        networks: "{{ ollama_networks | ansible.utils.remove_keys(target=['internal']) | default(omit) }}"
        restart: true
        restart_policy: unless-stopped
        security_opts:
          - "no-new-privileges:true"
        state: started
        volumes: "{{ default_host_volumes + ollama_volumes | default(omit) }}"
      register: ollama_container_state

- name: deploy-ollama | Wait for Ollama to accept connections
  ansible.builtin.wait_for:
    host: "{{ ollama_fqdn }}"
    port: 80
    connect_timeout: 1
    delay: 10
    state: started
    timeout: 30
  register: whatsupdocker_running
  retries: 10
  until: whatsupdocker_running is success
