---
- name: deploy-vaultwarden | Ensure modern version of Docker is available on host
  ansible.builtin.include_tasks:
    file: tasks/hosts-dependency-check-docker-version.yaml

####### VAULTWARDEN SECTION

# https://www.techaddressed.com/tutorials/vaultwarden-docker-compose/
# https://noted.lol/vaultwarden/

- name: deploy-vaultwarden | Set Vaultwarden facts
  ansible.builtin.set_fact:
    vaultwarden_image: "{{ vaultwarden_image | default('vaultwarden/server:latest') }}"
    vaultwarden_service_name: "{{ vaultwarden_service_name | default('vaultwarden') }}"
    vaultwarden_service_port: "{{ vaultwarden_service_port | default(8080) }}"

- name: deploy-vaultwarden | Set Vaultwarden volume facts
  ansible.builtin.set_fact:
    vaultwarden_volume_data_name: "{{ vaultwarden_service_name }}-data"
    vaultwarden_config_dir: "/root/{{ vaultwarden_service_name }}-config"

- name: deploy-vaultwarden | Set Vaultwarden aggregated facts
  ansible.builtin.set_fact:
    vaultwarden_fqdn: "{{ vaultwarden_service_name }}.{{ ansible_hostname }}.{{ homelab.certificate_domain | default('localdomain') }}"

- name: deploy-vaultwarden | Set Vaultwarden service facts
  ansible.builtin.set_fact:
    vaultwarden_networks:
      - name: "{{ web_network_name | default('web') }}"
    vaultwarden_ports:
      # Published ports to expose outside the container
      # host port:container port
      - "{{ vaultwarden_service_port }}:80"
    vaultwarden_volumes:
      # Local paths to mount into the container
      # local path:container path
      - "{{ vaultwarden_volume_data_name }}:/data"

- name: deploy-vaultwarden | Create Vaultwarden container labels
  ansible.builtin.set_fact:
    vaultwarden_container_labels: "{{ vaultwarden_container_labels | default({}) | combine({item.key: item.value}) }}"
  with_items:
    # ---------------------------------------------------------------
    # Traefik labels
    - { "key": "traefik.enable", "value": "true" }
    - {
      "key": "traefik.http.routers.{{ vaultwarden_service_name }}.entrypoints",
      "value": "websecure",
    }
    - {
      "key": "traefik.http.routers.{{ vaultwarden_service_name }}.rule",
      "value": "Host(`{{ vaultwarden_fqdn }}`)",
    }
    # ---------------------------------------------------------------
    # What's up Docker? labels
    - { "key": "wud.tag.include", "value": '^\d+\.\d+\.\d+-alpine+$$' }
    - {
      "key": "wud.link.template",
      "value": "https://github.com/dani-garcia/vaultwarden/releases/tag/${major}.${minor}.${patch}",
    }
    # ---------------------------------------------------------------
    # Docker Volume Backup labels
    - { "key": "docker-volume-backup.stop-during-backup", "value": "true" }
    # ---------------------------------------------------------------
    # Homepage labels
    - { "key": "homepage.group", "value": "Family" }
    - { "key": "homepage.name", "value": "Vaultwarden" }
    - { "key": "homepage.description", "value": "Get login details" }
    - { "key": "homepage.icon", "value": "vaultwarden.png" }
    - { "key": "homepage.href", "value": "https://{{ vaultwarden_fqdn }}/" }
    - {
      "key": "homepage.siteMonitor",
      "value": "https://{{ vaultwarden_fqdn }}/",
    }

- name: deploy-vaultwarden | Create Vaultwarden configuration directory
  ansible.builtin.file:
    path: "{{ vaultwarden_config_dir }}"
    state: directory
    mode: "0644"

- name: deploy-vaultwarden | Create Vaultwarden configuration
  ansible.builtin.template:
    src: templates/vaultwarden/vaultwarden.env.j2
    dest: "{{ vaultwarden_config_dir }}/vaultwarden.env"
    owner: root
    group: root
    mode: "0644"

- name: deploy-vaultwarden | Create Vaultwarden volume # noqa: syntax-check[unknown-module]
  community.docker.docker_volume:
    name: "{{ item }}"
    state: present
  loop:
    - "{{ vaultwarden_volume_data_name }}"

- name: deploy-vaultwarden | Pull Vaultwarden image
  community.docker.docker_image:
    name: "{{ vaultwarden_image }}"
    source: pull

- name: deploy-vaultwarden | Deploy Vaultwarden
  community.docker.docker_container:
    name: "{{ vaultwarden_service_name }}"
    image: "{{ vaultwarden_image }}"
    detach: true
    env_file: "{{ vaultwarden_config_dir }}/vaultwarden.env"
    labels: "{{ vaultwarden_container_labels | default(omit) }}"
    networks_cli_compatible: true
    networks: "{{ vaultwarden_networks }}"
    restart: true
    restart_policy: unless-stopped
    volumes: "{{ default_host_volumes + vaultwarden_volumes }}"
  register: vaultwarden_container_state

- name: deploy-vaultwarden | Wait for Vaultwarden to accept connections
  ansible.builtin.wait_for:
    host: "{{ vaultwarden_fqdn }}"
    port: 80
    connect_timeout: 1
    delay: 10
    state: started
    timeout: 30
  register: vaultwarden_running
  retries: 10
  until: vaultwarden_running is success
