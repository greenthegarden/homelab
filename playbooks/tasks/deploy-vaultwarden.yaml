---

- name: Get host Docker status
  community.docker.docker_host_info:
  register: host_docker_info
  ignore_errors: true

- name: Ensure Docker is available on host
  ansible.builtin.assert:
    that:
      - host_docker_info.host_info.ServerVersion is version('25.0', '>=')
    fail_msg: A version of Docker >= 20 is required to be installed

####### VAULTWARDEN SECTION

# https://www.techaddressed.com/tutorials/vaultwarden-docker-compose/
# https://noted.lol/vaultwarden/

- name: Set Vaultwarden facts
  ansible.builtin.set_fact:
    vaultwarden_image: "{{ vaultwarden_image | default('vaultwarden/server:latest') }}"
    vaultwarden_service_name: "{{ vaultwarden_service_name | default('vaultwarden') }}"
    vaultwarden_service_port: "{{ vaultwarden_service_port | default(8080) }}"
    vaultwarden_volume_name: "{{ vaultwarden_volume_name | default('vaultwarden') }}"
    vaultwarden_config_dir: /root/vaultwarden

- name: Set Vaultwarden aggregated facts
  ansible.builtin.set_fact:
    vaultwarden_fqdn: "{{ vaultwarden_service_name }}.{{ ansible_hostname }}.{{ homelab.lan_domain | default('localdomain') }}"

- name: Set Vaultwarden service facts
  ansible.builtin.set_fact:
    vaultwarden_networks:
      - name: "{{ web_network_name | default('web') }}"
    vaultwarden_ports:
      - "{{ vaultwarden_service_port | default(8080) }}:80"
    vaultwarden_volumes:
      - "{{ vaultwarden_volume_name }}:/data"
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

- name: Create Vaultwarden container labels
  ansible.builtin.set_fact:
    vaultwarden_container_labels: "{{ vaultwarden_container_labels | default({}) | combine({item.key: item.value}) }}"
  with_items:
    # Traefik labels
    - {
      "key": "traefik.enable",
      "value": "true"
    }
    - {
      "key": "traefik.docker.network",
      "value": "{{ web_network_name }}"
    }
    - {
      "key": "traefik.http.routers.{{ vaultwarden_service_name }}.entrypoints",
      "value": "websecure",
    }
    - {
      "key": "traefik.http.routers.{{ vaultwarden_service_name }}.rule",
      "value": "Host(`{{ vaultwarden_fqdn }}`)",
    }
    - {
      "key": "traefik.http.routers.{{ vaultwarden_service_name }}.service",
      "value": "{{ vaultwarden_service_name }}",
    }
    - {
      "key": "traefik.http.routers.{{ vaultwarden_service_name }}.tls",
      "value": "true",
    }
    # What's up Docker? labels
    - {
      "key": "wud.tag.include",
      "value": '^\d+\.\d+\.\d+-alpine+$$'
    }
    - {
      "key": "wud.link.template",
      "value": "https://github.com/dani-garcia/vaultwarden/releases/tag/$${major}.$${minor}.$${patch}",
    }
    # Docker Volume Backup labels
    - { "key": "docker-volume-backup.stop-during-backup", "value": "true" }
    # Homepage labels
    - { "key": "homepage.group", "value": "Cloud" }
    - { "key": "homepage.name", "value": "Vaultwarden" }
    - { "key": "homepage.description", "value": "Get login details" }
    - { "key": "homepage.icon", "value": "vaultwarden.png" }
    - { "key": "homepage.href", "value": "https://{{ vaultwarden_fqdn }}/" }
    - {
      "key": "homepage.siteMonitor",
      "value": "https://{{ vaultwarden_fqdn }}/",
    }

- name: Create Vaultwarden configuration directory
  ansible.builtin.file:
    path: "{{ vaultwarden_config_dir }}"
    state: directory
    mode: "0644"

- name: Create Vaultwarden configuration
  ansible.builtin.template:
    src: templates/vaultwarden/vaultwarden.env.j2
    dest: "{{ vaultwarden_config_dir }}/vaultwarden.env"
    owner: root
    group: root
    mode: "0644"

- name: Create Vaultwarden volume  # noqa: syntax-check[unknown-module]
  community.docker.docker_volume:
    name: "{{ vaultwarden_volume_name }}"
    state: present

- name: Check if Vaultwarden is running  # noqa: syntax-check[unknown-module]
  community.docker.docker_container_info:
    name: "{{ vaultwarden_service_name }}"
  register: vaultwarden_state

- name: Remove Vaultwarden container if changing version
  when:
    - vaultwarden_state.exists
    - vaultwarden_image_tag != vaultwarden_state.container.Config.Image | split(':') | last
  block:
    - name: Stop and remove existing Vaultwarden container
      community.docker.docker_container:
        name: "{{ vaultwarden_service_name }}"
        state: absent

    - name: Set update Vaultwarden
      ansible.builtin.set_fact:
        vaultwarden_update: true

- name: Deploy Vaultwarden if not running
  when: not vaultwarden_state.exists or (vaultwarden_update | default(false))
  block:
    - name: Pull Vaultwarden image
      community.docker.docker_image:
        name: "{{ vaultwarden_image }}"
        source: pull

    - name: Deploy Vaultwarden
      community.docker.docker_container:
        name: "{{ vaultwarden_service_name | default('vaultwarden') }}"
        image: "{{ vaultwarden_image }}"
        detach: true
        env_file: "{{ vaultwarden_config_dir }}/vaultwarden.env"
        labels: "{{ vaultwarden_container_labels }}"
        networks_cli_compatible: true
        networks: "{{ vaultwarden_networks }}"
        published_ports: "{{ vaultwarden_ports }}"
        restart: true
        restart_policy: unless-stopped
        volumes: "{{ vaultwarden_volumes }}"
      register: vaultwarden_container_state

    - name: Wait for Vaultwarden to accept connections
      ansible.builtin.wait_for:
        host: "{{ vaultwarden_fqdn }}"
        port: 80
        connect_timeout: 1
        delay: 10
        state: started
        timeout: 30
      register: vaultwarden_running
      until: vaultwarden_running is success
      retries: 10
