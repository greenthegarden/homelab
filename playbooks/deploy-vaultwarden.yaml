---
- name: Deploy Vaultwarden container

  hosts: vaultwarden

  vars:

    # Vaultwarden service facts
    vaultwarden_image_name: vaultwarden/server
    vaultwarden_image_tag: 1.33.1-alpine
    vaultwarden_service_name: vaultwarden
    vaultwarden_service_port: 8080
    vaultwarden_volume_name: vaultwarden

  tasks:

    ####### VAULTWARDEN SECTION

    # https://www.techaddressed.com/tutorials/vaultwarden-docker-compose/
    # https://noted.lol/vaultwarden/

    - name: Set Vaultwarden aggregated facts
      ansible.builtin.set_fact:
        vaultwarden_image: "{{ vaultwarden_image_name }}:{{ vaultwarden_image_tag }}"
        vaultwarden_fqdn: "{{ vaultwarden_service_name }}.{{ ansible_hostname }}.{{ lan_dns_domain }}"

    - name: Set Vaultwarden service facts
      ansible.builtin.set_fact:
        vaultwarden_networks:
          - name: "{{ web_network_name | default('web') }}"
        vaultwarden_ports:
          - "{{ vaultwarden_service_port | default(8080) }}:80"
        vaultwarden_volumes:
          - "{{ vaultwarden_volume_name }}:/data"
          - /etc/localtime:/etc/localtime:ro
          - /etc/timezone:/etc/timezone:ro

    - name: Create Vaultwarden container labels
      ansible.builtin.set_fact:
        vaultwarden_container_labels: "{{ vaultwarden_container_labels | default({}) | combine({item.key: item.value}) }}"
      with_items:
        # Traefik labels
        - {
            "key": "traefik.enable",
            "value": "true"
          }
        - { 
            "key": "traefik.docker.network",
            "value": "{{ web_network_name }}"
          }
        - {
            "key": "traefik.http.routers.{{ vaultwarden_service_name }}.entrypoints",
            "value": "websecure",
          }
        - {
            "key": "traefik.http.routers.{{ vaultwarden_service_name }}.rule",
            "value": "Host(`{{ vaultwarden_fqdn }}`)",
          }
        - {
            "key": "traefik.http.routers.{{ vaultwarden_service_name }}.service",
            "value": "{{ vaultwarden_service_name }}",
          }
        - {
            "key": "traefik.http.routers.{{ vaultwarden_service_name }}.tls",
            "value": "true",
          }
        # What's up Docker? labels
        - { 
            "key": "wud.tag.include",
            "value": '^\d+\.\d+\.\d+-alpine+$$'
          }
        - {
            "key": "wud.link.template",
            "value": "https://github.com/dani-garcia/vaultwarden/releases/tag/$${major}.$${minor}.$${patch}",
          }
        # Homepage labels
        - { "key": "homepage.group", "value": "Applications" }
        - { "key": "homepage.name", "value": "Vaultwarden" }
        - { "key": "homepage.description", "value": "Get login details" }
        - { "key": "homepage.icon", "value": "vaultwarden.png" }
        - { "key": "homepage.href", "value": "https://{{ vaultwarden_fqdn }}/" }
        - {
            "key": "homepage.siteMonitor",
            "value": "https://{{ vaultwarden_fqdn }}/",
          }

    - name: Copy Vaultwarden configuration
      ansible.builtin.copy:
        src: vaultwarden/vaultwarden.env
        dest: /root/vaultwarden.env
        owner: root
        group: root
        mode: "0644"

    - name: Check if Vaultwarden is running
      community.docker.docker_container_info:
        name: "{{ vaultwarden_service_name }}"
      register: vaultwarden_state

    - name: Remove Vaultwarden container if changing version
      when:
        - vaultwarden_state.exists
        - vaultwarden_image_tag != vaultwarden_state.container.Config.Image | split(':') | last
      block:
        - name: Stop and remove existing Vaultwarden container
          community.docker.docker_container:
            name: "{{ vaultwarden_service_name }}"
            state: absent

        - name: Set update Vaultwarden
          ansible.builtin.set_fact:
            vaultwarden_update: true

    - name: Deploy Vaultwarden if not running
      when: not vaultwarden_state.exists or (vaultwarden_update | default(false))
      block:
        - name: Create Vaultwarden volume
          community.docker.docker_volume:
            name: "{{ vaultwarden_volume_name }}"
            state: present

        - name: Pull Vaultwarden image
          community.docker.docker_image:
            name: "{{ vaultwarden_image }}"
            source: pull

        - name: Deploy Vaultwarden
          community.docker.docker_container:
            name: "{{ vaultwarden_service_name | default('vaultwarden') }}"
            image: "{{ vaultwarden_image }}"
            detach: true
            env_file: /root/vaultwarden.env
            labels: "{{ vaultwarden_container_labels }}"
            networks_cli_compatible: true
            networks: "{{ vaultwarden_networks }}"
            published_ports: "{{ vaultwarden_ports }}"
            restart: true
            restart_policy: unless-stopped
            volumes: "{{ vaultwarden_volumes }}"
          register: vaultwarden_container_state

        - name: Wait for Vaultwarden to accept connections
          ansible.builtin.wait_for:
            host: "{{ vaultwarden_fqdn }}"
            port: 80
            connect_timeout: 1
            delay: 10
            state: started
            timeout: 30
          register: vaultwarden_running
          until: vaultwarden_running is success
          retries: 10
